<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <%- include("../../views/partials/user/header") %>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
            margin: 0; /* Prevent default body margin */
        }
        .status-delivered { color: #16a34a; }
        .status-cancelled { color: #dc2626; }
        .status-pending { color: #d97706; }
        .status-processing { color: #2563eb; }
        .status-returned { color: #ea580c; }

        /* Profile Container and Layout */
        .profile-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: flex;
            max-width: 1350px;
            width: 90%;
            margin: 2rem auto;
            min-height: calc(100vh - 4rem); /* Flexible height */
        }
        .profile-sidebar {
            background: #2c3e50;
            color: #ffffff;
            padding: 2rem;
            width: 300px;
        }
        .profile-sidebar .card {
            background: transparent;
            border: none;
        }
        .profile-sidebar .nav-link {
            color: #d1d8e0;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 5px 0;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }
        .profile-sidebar .nav-link:hover,
        .profile-sidebar .nav-link.active {
            background: #34495e;
            color: #ffffff;
        }
        .profile-sidebar .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
            margin-right: 10px;
        }
        .profile-content {
            flex: 1;
            padding: 2rem;
            background: #ffffff;
            border-radius: 0 10px 10px 0;
            overflow-y: auto; /* Single scrollbar for entire content */
            max-height: calc(100vh - 4rem); /* Fit within viewport */
        }
        /* Breadcrumbs */
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            background: none;
        }
        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 50;
        }
        .modal-content {
            background-color: white;
            margin: 15% auto; /* Adjusted for better centering */
            padding: 15px;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
        }
        /* Ensure address section content is not truncated */
        .address-container {
            background: #f9fafb;
            padding: 1rem;
            border-radius: 8px;
            word-break: break-word; /* Prevent long text from overflowing */
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%- include("../../views/partials/user/sidebar", { currentPage: 'orders', user: user }) %>
        
        <div class="profile-content">
            <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
                <ol class="flex space-x-2">
                    <li class="flex items-center">
                        <a href="/" class="hover:underline text-blue-600">Home</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center">
                        <a href="/profile/orders" class="hover:underline text-blue-600">Orders</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center text-gray-500">
                         <%= order.orderId %>
                    </li>
                </ol>
            </nav>

            <div class="bg-white rounded-lg shadow-md p-6">
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-2xl font-bold"> <%= order.orderId %></h1>
                    <div class="flex space-x-2">
                        <a href="/api/orders/<%= order.orderId %>/invoice" 
                           class="px-4 py-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition">
                            <i class="fas fa-file-download mr-2"></i> Invoice
                        </a>
                        <% if (order.status === 'Delivered') { %>
                            <button onclick="openReturnModal('<%= order.orderId %>')" 
                                    class="px-4 py-2 bg-orange-100 text-orange-800 rounded-lg hover:bg-orange-200 transition">
                                <i class="fas fa-undo-alt mr-2"></i> Return
                            </button>
                        <% } %>
                        <% if (!['Cancelled', 'Delivered', 'Returned'].includes(order.status)) { %>
                            <button onclick="openCancelModal('<%= order.orderId %>')" 
                                    class="px-4 py-2 bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition">
                                <i class="fas fa-times-circle mr-2"></i> Cancel
                            </button>
                        <% } %>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div>
                        <h2 class="text-lg font-semibold mb-2">Order Information</h2>
                        <p class="mb-2"><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric',
                            hour: 'numeric',
                            minute: 'numeric',
                            second: 'numeric'
                        }) %></p>
                        <p class="mb-2"><strong>Status:</strong> 
                            <span class="font-medium status-<%= order.status.toLowerCase().replace(' ', '-') %>">
                                <%= order.status %>
                            </span>
                        </p>
                        <% if (order.cancelReason) { %>
                            <p class="mb-2"><strong>Cancellation Reason:</strong> <%= order.cancelReason %></p>
                        <% } %>
                        <% if (order.returnReason) { %>
                            <p class="mb-2"><strong>Return Reason:</strong> <%= order.returnReason %></p>
                        <% } %>
                    </div>
                    <div>
                        <h2 class="text-lg font-semibold mb-2">Payment Information</h2>
                        <p class="mb-2"><strong>Subtotal:</strong> ₹<%= order.totalPrice.toFixed(2) %></p>
                        <p class="mb-2"><strong>Discount:</strong> ₹<%= order.discount.toFixed(2) %></p>
                        <p class="mb-2"><strong>Total:</strong> ₹<%= order.finalAmount.toFixed(2) %></p>
                        <p class="mb-2"><strong>Payment Method:</strong> <%= order.paymentMethod || 'Not specified' %></p>
                    </div>
                </div>

                <div class="mb-8">
                    <h2 class="text-lg font-semibold mb-4">Order Items</h2>
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead>
                                <tr>
                                    <th class="py-2 px-4 border-b text-left">Product</th>
                                    <th class="py-2 px-4 border-b text-left">Price</th>
                                    <th class="py-2 px-4 border-b text-left">Quantity</th>
                                    <th class="py-2 px-4 border-b text-left">Total</th>
                                    <th class="py-2 px-4 border-b text-left">Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.orderedItems.forEach(item => { %>
                                    <tr>
                                        <td class="py-2 px-4 border-b">
                                            <div class="flex items-center">
                                                <% if (item.product && item.product.productImage && item.product.productImage.length > 0) { %>
                                                    <img src="<%= item.product.productImage[0] %>" 
                                                         alt="<%= item.product.productName || 'Product' %>" 
                                                         class="w-16 h-16 object-cover mr-4">
                                                <% } else { %>
                                                    <img src="/images/default-product.jpg" 
                                                         alt="No image available" 
                                                         class="w-16 h-16 object-cover mr-4">
                                                <% } %>
                                                <div>
                                                    <h3 class="font-medium"><%= item.product?.productName || 'Unknown Product' %></h3>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="py-2 px-4 border-b">₹<%= item.price?.toFixed(2) || '0.00' %></td>
                                        <td class="py-2 px-4 border-b"><%= item.quantity || 0 %></td>
                                        <td class="py-2 px-4 border-b">₹<%= (item.price * item.quantity)?.toFixed(2) || '0.00' %></td>
                                        <td class="py-2 px-4 border-b">
                                            <% const isCancelled = order.cancelledItems && order.cancelledItems.some(c => c.product.toString() === item.product._id.toString()); %>
                                            <% if (isCancelled) { %>
                                                <span class="text-red-600">Cancelled</span>
                                                <% if (order.cancelledItems.find(c => c.product.toString() === item.product._id.toString())?.cancelReason) { %>
                                                    <p class="text-sm text-gray-600">Reason: <%= order.cancelledItems.find(c => c.product.toString() === item.product._id.toString()).cancelReason %></p>
                                                <% } %>
                                            <% } else if (!['Cancelled', 'Delivered', 'Returned', 'Return Request'].includes(order.status)) { %>
                                                <button onclick="openCancelItemModal('<%= order.orderId %>', '<%= item.product._id %>')" 
                                                        class="px-3 py-1 bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition">
                                                    <i class="fas fa-times-circle mr-1"></i> Cancel Item
                                                </button>
                                            <% } %>
                                        </td>
                                    </tr>
                                <% }) %>
                                <% if (order.cancelledItems && order.cancelledItems.length > 0) { %>
                                    <% order.cancelledItems.forEach(item => { %>
                                        <tr class="bg-gray-100">
                                            <td class="py-2 px-4 border-b">
                                                <div class="flex items-center">
                                                    <% if (item.product && item.product.productImage && item.product.productImage.length > 0) { %>
                                                        <img src="<%= item.product.productImage[0] %>" 
                                                             alt="<%= item.product.productName || 'Product' %>" 
                                                             class="w-16 h-16 object-cover mr-4">
                                                    <% } else { %>
                                                        <img src="/images/default-product.jpg" 
                                                             alt="No image available" 
                                                             class="w-16 h-16 object-cover mr-4">
                                                    <% } %>
                                                    <div>
                                                        <h3 class="font-medium"><%= item.product?.productName || 'Unknown Product' %></h3>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="py-2 px-4 border-b">₹<%= item.price?.toFixed(2) || '0.00' %></td>
                                            <td class="py-2 px-4 border-b"><%= item.quantity || 0 %></td>
                                            <td class="py-2 px-4 border-b">₹<%= (item.price * item.quantity)?.toFixed(2) || '0.00' %></td>
                                            <td class="py-2 px-4 border-b">
                                                <span class="text-red-600">Cancelled</span>
                                                <% if (item.cancelReason) { %>
                                                    <p class="text-sm text-gray-600">Reason: <%= item.cancelReason %></p>
                                                <% } %>
                                            </td>
                                        </tr>
                                    <% }) %>
                                <% } %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="mb-8">
                    <h2 class="text-lg font-semibold mb-4">Shipping Address</h2>
                    <div class="address-container">
                        <% if (order.address && Object.keys(order.address).length > 0) { %>
                            <p class="mb-2"><strong>Name:</strong> <%= order.address.name || 'N/A' %></p>
                            <p class="mb-2"><strong>Landmark:</strong> <%= order.address.landMark || 'N/A' %></p>
                            <p class="mb-2"><strong>City, State, Pincode:</strong> <%= order.address.city || 'N/A' %>, <%= order.address.state || 'N/A' %> <%= order.address.pincode || 'N/A' %></p>
                            <p class="mb-2"><strong>Phone:</strong> <%= order.address.phone || 'N/A' %></p>
                            <p class="mb-2"><strong>Alternate Phone:</strong> <%= order.address.altPhone || 'N/A' %></p>
                        <% } else { %>
                            <p>No address information available</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cancel Modal -->
    <div id="cancelModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold">Cancel Order</h2>
                <button onclick="closeCancelModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4">Are you sure you want to cancel this order? This action cannot be undone.</p>
            <input type="hidden" id="cancelOrderID">
            <div class="mb-4">
                <label for="cancelReason" class="block text-gray-700 mb-2">Reason for Cancellation (Optional):</label>
                <textarea id="cancelReason" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" rows="3"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeCancelModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Close
                </button>
                <button onclick="confirmCancelOrder()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <!-- Return Modal -->
    <div id="returnModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold">Return Order</h2>
                <button onclick="closeReturnModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4">Please provide a reason for returning this order.</p>
            <input type="hidden" id="returnOrderID">
            <div class="mb-4">
                <label for="returnReason" class="block text-gray-700 mb-2">Reason for Return (Required):</label>
                <textarea id="returnReason" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeReturnModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Close
                </button>
                <button onclick="confirmReturnOrder()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
                    Submit Return
                </button>
            </div>
        </div>
    </div>

    <!-- Cancel Item Modal -->
    <div id="cancelItemModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-semibold">Cancel Item</h2>
                <button onclick="closeCancelItemModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4">Are you sure you want to cancel this item? This action cannot be undone.</p>
            <input type="hidden" id="cancelItemOrderID">
            <input type="hidden" id="cancelItemProductID">
            <div class="mb-4">
                <label for="cancelItemReason" class="block text-gray-700 mb-2">Reason for Cancellation (Optional):</label>
                <textarea id="cancelItemReason" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" rows="3"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeCancelItemModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Close
                </button>
                <button onclick="confirmCancelItem()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <script>
   function openCancelModal(orderID) {
    console.log('Opening cancel modal with orderID:', orderID);
    if (!orderID) {
        console.error('No orderID provided to openCancelModal');
        Swal.fire({
            title: 'Error!',
            text: 'Invalid order ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    const cancelOrderInput = document.getElementById('cancelOrderID');
    if (!cancelOrderInput) {
        console.error('cancelOrderID input element not found in DOM');
        Swal.fire({
            title: 'Error!',
            text: 'Internal error: Cancel modal not properly initialized.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    cancelOrderInput.value = orderID;
    console.log('Set cancelOrderID input value to:', cancelOrderInput.value);
    document.getElementById('cancelModal').style.display = 'block';
}

function closeCancelModal() {
    console.log('Closing cancel modal');
    document.getElementById('cancelModal').style.display = 'none';
    const cancelReasonInput = document.getElementById('cancelReason');
    if (cancelReasonInput) cancelReasonInput.value = '';
}

function openReturnModal(orderID) {
    console.log('Opening return modal with orderID:', orderID);
    if (!orderID) {
        console.error('No orderID provided to openReturnModal');
        Swal.fire({
            title: 'Error!',
            text: 'Invalid order ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    document.getElementById('returnOrderID').value = orderID;
    document.getElementById('returnModal').style.display = 'block';
}

function closeReturnModal() {
    console.log('Closing return modal');
    document.getElementById('returnModal').style.display = 'none';
    const returnReasonInput = document.getElementById('returnReason');
    if (returnReasonInput) returnReasonInput.value = '';
}

function openCancelItemModal(orderID, productID) {
    console.log('Opening cancel item modal for:', { orderID, productID });
    if (!orderID || !productID) {
        console.error('Invalid orderID or productID for openCancelItemModal:', { orderID, productID });
        Swal.fire({
            title: 'Error!',
            text: 'Invalid order or product ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    const cancelItemOrderInput = document.getElementById('cancelItemOrderID');
    const cancelItemProductInput = document.getElementById('cancelItemProductID');
    if (!cancelItemOrderInput || !cancelItemProductInput) {
        console.error('cancelItemOrderID or cancelItemProductID input element not found in DOM');
        Swal.fire({
            title: 'Error!',
            text: 'Internal error: Cancel item modal not properly initialized.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }
    cancelItemOrderInput.value = orderID;
    cancelItemProductInput.value = productID;
    console.log('Set cancelItem inputs:', { orderID: cancelItemOrderInput.value, productID: cancelItemProductInput.value });
    document.getElementById('cancelItemModal').style.display = 'block';
}

function closeCancelItemModal() {
    console.log('Closing cancel item modal');
    document.getElementById('cancelItemModal').style.display = 'none';
    const cancelItemReasonInput = document.getElementById('cancelItemReason');
    if (cancelItemReasonInput) cancelItemReasonInput.value = '';
}

async function confirmCancelOrder() {
    const orderId = document.getElementById('cancelOrderID')?.value;
    const reason = document.getElementById('cancelReason')?.value || '';
    console.log('Attempting to cancel order:', { orderId, reason });

    if (!orderId) {
        console.error('No orderId found in cancelOrderID input');
        await Swal.fire({
            title: 'Error!',
            text: 'Invalid order ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        closeCancelModal();
        return;
    }

    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this order? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    });

    if (!result.isConfirmed) {
        console.log('Cancellation aborted by user');
        closeCancelModal();
        return;
    }

    try {
        const response = await fetch(`/api/orders/${orderId}/cancel`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ reason })
        });

        console.log('Fetch response status:', response.status);
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Non-JSON response received:', text);
            throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        console.log('Server response data:', data);

        if (response.ok) {
            await Swal.fire({
                title: 'Cancelled!',
                text: data.message || 'Order cancelled successfully.',
                icon: 'success',
                confirmButtonColor: '#3085d6'
            });
            window.location.reload();
        } else {
            await Swal.fire({
                title: 'Error!',
                text: data.error || 'Failed to cancel order.',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        await Swal.fire({
            title: 'Error!',
            text: `An error occurred while cancelling the order: ${error.message}`,
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
    }
    closeCancelModal();
}

async function confirmReturnOrder() {
    const orderId = document.getElementById('returnOrderID')?.value;
    const reason = document.getElementById('returnReason')?.value;
    console.log('Attempting to submit return for order:', { orderId, reason });

    if (!orderId) {
        console.error('No orderId found in returnOrderID input');
        await Swal.fire({
            title: 'Error!',
            text: 'Invalid order ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        closeReturnModal();
        return;
    }

    if (!reason?.trim()) {
        await Swal.fire({
            title: 'Error!',
            text: 'Please provide a reason for the return.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }

    try {
        const response = await fetch(`/api/orders/${orderId}/return`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ reason })
        });

        console.log('Fetch response status:', response.status);
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Non-JSON response received:', text);
            throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        console.log('Server response data:', data);

        if (response.ok) {
            await Swal.fire({
                title: 'Success!',
                text: data.message || 'Return request submitted successfully.',
                icon: 'success',
                confirmButtonColor: '#3085d6'
            });
            window.location.reload();
        } else {
            await Swal.fire({
                title: 'Error!',
                text: data.error || 'Failed to submit return request.',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
            if (response.status === 400) {
                document.getElementById('returnReason').focus();
            }
        }
    } catch (error) {
        console.error('Error submitting return:', error);
        await Swal.fire({
            title: 'Error!',
            text: `An error occurred while submitting the return request: ${error.message}`,
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
    }
    closeReturnModal();
}

async function confirmCancelItem() {
    const orderId = document.getElementById('cancelItemOrderID')?.value;
    const productId = document.getElementById('cancelItemProductID')?.value;
    const reason = document.getElementById('cancelItemReason')?.value || '';
    console.log('Attempting to cancel item:', { orderId, productId, reason });

    if (!orderId || !productId) {
        console.error('Invalid orderId or productId in cancelItem inputs:', { orderId, productId });
        await Swal.fire({
            title: 'Error!',
            text: 'Invalid order or product ID. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        closeCancelItemModal();
        return;
    }

    const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to cancel this item? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    });

    if (!result.isConfirmed) {
        console.log('Item cancellation aborted by user');
        closeCancelItemModal();
        return;
    }

    try {
        const response = await fetch(`/api/orders/${orderId}/cancel-item/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({ reason })
        });

        console.log('Fetch response status:', response.status);
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Non-JSON response received:', text);
            throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        console.log('Server response data:', data);

        if (response.ok) {
            await Swal.fire({
                title: 'Cancelled!',
                text: data.message || 'Item cancelled successfully.',
                icon: 'success',
                confirmButtonColor: '#3085d6'
            });
            window.location.reload();
        } else {
            await Swal.fire({
                title: 'Error!',
                text: data.error || 'Failed to cancel item.',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
        }
    } catch (error) {
        console.error('Error cancelling item:', error);
        await Swal.fire({
            title: 'Error!',
            text: `An error occurred while cancelling the item: ${error.message}`,
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
    }
    closeCancelItemModal();
}

window.onclick = function(event) {
    if (event.target.classList.contains('modal')) {
        console.log('Closing modals via backdrop click');
        closeCancelModal();
        closeReturnModal();
        closeCancelItemModal();
    }
};
</script>
</body>
</html>