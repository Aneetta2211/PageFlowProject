<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Wishlist</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <%- include("../../views/partials/user/header") %>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }

        /* Profile Container and Layout */
        .profile-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            max-width: 1350px;
            width: 90%;
            margin: 2rem auto;
            min-height: calc(100vh - 4rem);
        }

        .profile-sidebar {
            background: #2c3e50;
            color: #ffffff;
            padding: 2rem;
            width: 300px;
        }

        .profile-sidebar .card {
            background: transparent;
            border: none;
        }

        .profile-sidebar .nav-link {
            color: #d1d8e0;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 5px 0;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }

        .profile-sidebar .nav-link:hover,
        .profile-sidebar .nav-link.active {
            background: #34495e;
            color: #ffffff;
        }

        .profile-sidebar .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
            margin-right: 10px;
        }

        .profile-content {
            flex: 1;
            padding: 2rem;
            background: #ffffff;
            border-radius: 0 10px 10px 0;
            overflow-y: auto;
        }

        /* Breadcrumbs */
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            background: none;
        }

        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }

        .breadcrumb-item a:hover {
            text-decoration: underline;
        }

        /* Wishlist Items */
        .wishlist-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 2rem;
        }

        .wishlist-item {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .wishlist-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        .product-img {
            height: 200px;
            width: 100%;
            object-fit: cover;
            cursor: pointer;
        }

        .product-info {
            padding: 1rem;
        }

        .product-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #1e293b;
        }

        .product-price {
            font-weight: bold;
            color: #1e40af;
            margin-bottom: 1rem;
        }

        .product-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-to-cart-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .add-to-cart-btn:hover {
            background: #2563eb;
        }

        .add-to-cart-btn:disabled {
            background: #d1d5db;
            cursor: not-allowed;
        }

        .remove-btn {
            background: none;
            border: none;
            color: #ef4444;
            cursor: pointer;
            font-size: 1.25rem;
        }

        .empty-wishlist {
            background: white;
            padding: 2rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .browse-btn {
            display: inline-block;
            margin-top: 1rem;
            padding: 0.5rem 1.5rem;
            background: #3b82f6;
            color: white;
            border-radius: 0.375rem;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.2s;
        }

        .browse-btn:hover {
            background: #2563eb;
        }

        .date-added {
            font-size: 0.75rem;
            color: #6b7280;
            margin-bottom: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%- include("../../views/partials/user/sidebar", { currentPage: 'wishlist', user: user }) %>
        <div class="profile-content">
            <!-- Breadcrumbs -->
            <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
                <ol class="flex space-x-2">
                    <li class="flex items-center">
                        <a href="/home" class="hover:underline text-blue-600">Home</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center text-gray-500">
                        Wishlist
                    </li>
                </ol>
            </nav>

            <h1 class="text-3xl font-bold text-gray-800 mb-6">My Wishlist</h1>

            <% if (wishlistItems && wishlistItems.products && wishlistItems.products.length > 0) { %>
                <div class="wishlist-grid">
                    <% wishlistItems.products.forEach(item => { %>
                        <% if (item.productId) { %>
                            <div class="wishlist-item" data-product-id="<%= item.productId._id %>">
                                <a href="/productDetails/<%= item.productId._id %>">
                                    <img 
                                        src="<%= item.productId && item.productId.productImage && Array.isArray(item.productId.productImage) && item.productId.productImage.length > 0 ? 
                                            item.productId.productImage[0] : 
                                            '/images/default-product.jpg' %>" 
                                        class="product-img" 
                                        alt="<%= item.productId && item.productId.productName ? item.productId.productName : 'Unknown Product' %>"
                                        onerror="this.onerror=null;this.src='/images/default-product.jpg'"
                                    >
                                </a>
                                <div class="product-info">
                                    <p class="date-added">
                                        Added: <%= item.addedOn ? new Date(item.addedOn).toLocaleDateString() : 'N/A' %>
                                    </p>
                                    <h3 class="product-name"><%= item.productId.productName || 'Unknown Product' %></h3>
                                    <p class="product-price">â‚¹<%= item.productId.salesPrice ? item.productId.salesPrice.toFixed(2) : 'N/A' %></p>
                                    <div class="product-actions">
                                        <% if (item.productId.quantity > 0 && item.productId.status === 'Available') { %>
                                            <% if (cartItems && cartItems.includes(item.productId._id.toString())) { %>
                                                <a href="/profile/cart" class="add-to-cart-btn">
                                                    <i class="fas fa-shopping-cart mr-1"></i> In Cart
                                                </a>
                                            <% } else { %>
                                                <button class="add-to-cart-btn" onclick="addToCart('<%= item.productId._id %>')">
                                                    <i class="fas fa-cart-plus mr-1"></i> Add to Cart
                                                </button>
                                            <% } %>
                                        <% } else { %>
                                            <button class="add-to-cart-btn" disabled>
                                                <%= item.productId.status === 'out of stock' ? 'Out of Stock' : 'Not Available' %>
                                            </button>
                                        <% } %>
                                        <button class="remove-btn" onclick="removeFromWishlist('<%= item.productId._id %>')">
                                            <i class="fas fa-heart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% }); %>
                </div>
            <% } else { %>
                <div class="empty-wishlist">
                    <p class="text-gray-600 mb-4">Your wishlist is empty.</p>
                    <a href="/loadShoppingPage" class="browse-btn">
                        <i class="fas fa-shopping-bag mr-2"></i> Browse Products
                    </a>
                </div>
            <% } %>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        async function addToCart(productId) {
            try {
                const response = await fetch(`/wishlist/add-to-cart/${productId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ quantity: 1 }),
                    credentials: 'include'
                });

                if (!response.ok) {
                    const text = await response.text();
                    console.error('Add to cart failed:', response.status, text);
                    let errorData;
                    try {
                        errorData = JSON.parse(text);
                    } catch {
                        throw new Error('Server returned non-JSON response: ' + text.substring(0, 100));
                    }
                    if (errorData.loginUrl) {
                        window.location.href = errorData.loginUrl;
                        return;
                    }
                    throw new Error(errorData.error || `Failed to add to cart (Status: ${response.status})`);
                }

                const result = await response.json();

                if (result.success) {
                    // Update cart count in UI
                    const cartCountElement = document.querySelector('.cart-count');
                    if (cartCountElement && result.cartCount) {
                        cartCountElement.textContent = result.cartCount;
                    }

                    // Remove item from DOM with animation
                    const item = document.querySelector(`.wishlist-item[data-product-id="${productId}"]`);
                    if (item) {
                        item.style.transform = 'scale(0.9)';
                        item.style.opacity = '0';
                        setTimeout(() => item.remove(), 300);
                    }

                    // Check if wishlist is now empty
                    const wishlistGrid = document.querySelector('.wishlist-grid');
                    if (wishlistGrid && wishlistGrid.children.length === 0) {
                        setTimeout(() => location.reload(), 300);
                    }

                    Swal.fire({
                        icon: 'success',
                        title: 'Added to Cart',
                        text: result.message || 'Product added to your cart and removed from wishlist',
                        showCancelButton: true,
                        confirmButtonText: 'View Cart',
                        cancelButtonText: 'OK',
                        buttonsStyling: false,
                        customClass: {
                            confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded mr-2',
                            cancelButton: 'bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded'
                        }
                    }).then((swalResult) => {
                        if (swalResult.isConfirmed) {
                            window.location.href = result.cartUrl || '/profile/cart';
                        }
                    });
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to add to cart',
                    confirmButtonText: 'OK',
                    buttonsStyling: false,
                    customClass: {
                        confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded'
                    }
                });
            }
        }

        async function removeFromWishlist(productId) {
            try {
                const response = await fetch('/wishlist/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId }),
                    credentials: 'include'
                });

                if (!response.ok) {
                    const text = await response.text();
                    console.error('Remove from wishlist failed:', response.status, text);
                    let errorData;
                    try {
                        errorData = JSON.parse(text);
                    } catch {
                        throw new Error('Server returned non-JSON response: ' + text.substring(0, 100));
                    }
                    if (errorData.loginUrl) {
                        window.location.href = errorData.loginUrl;
                        return;
                    }
                    throw new Error(errorData.error || `Failed to remove from wishlist (Status: ${response.status})`);
                }

                const result = await response.json();

                if (result.success) {
                    // Remove item from DOM with animation
                    const item = document.querySelector(`.wishlist-item[data-product-id="${productId}"]`);
                    if (item) {
                        item.style.transform = 'scale(0.9)';
                        item.style.opacity = '0';
                        setTimeout(() => item.remove(), 300);
                    }

                    // Check if wishlist is now empty
                    const wishlistGrid = document.querySelector('.wishlist-grid');
                    if (wishlistGrid && wishlistGrid.children.length === 0) {
                        setTimeout(() => location.reload(), 300);
                    }

                    Swal.fire({
                        icon: 'success',
                        title: 'Removed',
                        text: 'Product removed from wishlist',
                        timer: 1500,
                        showConfirmButton: false,
                        buttonsStyling: false,
                        customClass: {
                            confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded'
                        }
                    });
                }
            } catch (error) {
                console.error('Wishlist remove error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to remove from wishlist',
                    confirmButtonText: 'OK',
                    buttonsStyling: false,
                    customClass: {
                        confirmButton: 'bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded'
                    }
                });
            }
        }
    </script>
</body>
</html>