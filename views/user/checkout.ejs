<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <%- include("../../views/partials/user/header") %>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f9fafb;
    }
    .profile-container {
      background: #ffffff;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      display: flex;
      max-width: 1350px;
      width: 90%;
      margin: 2rem auto;
      height: calc(105vh - 105px);
    }
    .profile-sidebar {
      background: #2c3e50;
      color: #ffffff;
      padding: 2rem;
      width: 300px;
      height: 100%;
    }
    .profile-sidebar .card {
      background: transparent;
      border: none;
    }
    .profile-sidebar .nav-link {
      color: #d1d8e0;
      padding: 10px 15px;
      border-radius: 5px;
      margin: 5px 0;
      font-weight: 500;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
    }
    .profile-sidebar .nav-link:hover,
    .profile-sidebar .nav-link.active {
      background: #34495e;
      color: #ffffff;
    }
    .profile-sidebar .nav-link i {
      width: 20px;
      text-align: center;
      font-size: 1rem;
      margin-right: 10px;
    }
    .profile-content {
      flex: 1;
      padding: 2rem;
      background: #ffffff;
      border-radius: 0 10px 10px 0;
      max-height: 100%;
      overflow-y: auto;
    }
    .breadcrumb {
      font-size: 0.875rem;
      color: #6b7280;
      margin-bottom: 1.5rem;
      background: none;
    }
    .breadcrumb-item a {
      color: #3b82f6;
      text-decoration: none;
    }
    .breadcrumb-item a:hover {
      text-decoration: underline;
    }
    .address-card {
      border: 1px solid #e5e7eb;
      padding: 1rem;
      margin-bottom: 1rem;
      cursor: pointer;
      transition: border-color 0.3s;
      border-radius: 8px;
    }
    .address-card.selected {
      border-color: #3b82f6;
      background-color: #eff6ff;
    }
    .hidden {
      display: none;
    }
    .address-form input,
    .address-form label {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 4px;
      margin-bottom: 0.5rem;
    }
    .address-form button {
      padding: 0.5rem 1rem;
      border-radius: 4px;
    }
    .order-summary {
      background: #ffffff;
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    .order-item {
      border-bottom: 1px solid #e5e7eb;
      padding-bottom: 1rem;
      margin-bottom: 1rem;
    }
    .order-item:last-child {
      border-bottom: none;
    }
    .place-order-btn {
      background: #16a34a;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s;
    }
    .place-order-btn:hover {
      background: #15803d;
    }
    .place-order-btn:disabled {
      background: #6b7280;
      cursor: not-allowed;
    }
    .alert {
      padding: 1rem;
      border-radius: 0.375rem;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
    }
    .alert-success {
      background-color: #d1fae5;
      color: #065f46;
    }
    .alert-warning {
      background-color: #fefcbf;
      color: #744210;
    }
    .alert i {
      margin-right: 0.5rem;
    }
    .default-address {
      display: inline-flex;
      align-items: center;
      padding: 0.25rem 0.5rem;
      background-color: #10b981;
      color: white;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      margin-left: 0.5rem;
    }
    .payment-options {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .payment-option {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      transition: all 0.3s ease;
    }
    .payment-option:hover {
      border-color: #3b82f6;
      background: #f8f9ff;
    }
    .payment-option input[type="radio"] {
      margin-right: 0.75rem;
    }
    .coupon-section {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    .coupon-input-group {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    .coupon-section input {
      padding: 0.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 4px;
      width: 200px;
    }
    .coupon-section button {
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-weight: 500;
    }
    .coupon-applied {
      color: #065f46;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }
    .coupon-list {
      margin-top: 1rem;
    }
    .coupon-list h3 {
      font-size: 1.1rem;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    .coupon-list ul {
      list-style: none;
      padding: 0;
    }
    .coupon-list li {
      padding: 0.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 4px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    .coupon-list li:hover {
      background-color: #f8f9ff;
    }
    .coupon-list li.disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }
    .coupon-list li span {
      font-size: 0.875rem;
      color: #6b7280;
    }
    .coupon-section select#coupon-code {
      appearance: none;
      -webkit-appearance: none;
      -moz-appearance: none;
      background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'><path d='M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/></svg>") no-repeat right 0.75rem center/12px 12px;
      background-color: #ffffff;
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      padding: 0.75rem 2.5rem 0.75rem 0.75rem;
      width: 300px;
      font-size: 0.875rem;
      color: #374151;
      transition: all 0.2s ease;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    .coupon-section select#coupon-code:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    .coupon-section select#coupon-code:disabled {
      background-color: #f3f4f6;
      cursor: not-allowed;
      opacity: 0.7;
    }
    .coupon-section select#coupon-code option {
      padding: 0.5rem;
      background: #ffffff;
      color: #374151;
    }
    .coupon-section select#coupon-code option:disabled {
      color: #6b7280;
      background: #f9fafb;
    }
</style>
</head>
<body>
  <div class="profile-container">
    <%- include("../../views/partials/user/sidebar", { currentPage: 'checkout', user: user }) %>
    <div class="profile-content">
      <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
        <ol class="flex space-x-2">
          <li class="flex items-center">
            <a href="/home" class="hover:underline text-blue-600">Home</a>
            <span class="mx-2 text-gray-400">/</span>
          </li>
          <li class="flex items-center">
            <a href="/profile/cart" class="hover:underline text-blue-600">Cart</a>
            <span class="mx-2 text-gray-400">/</span>
          </li>
          <li class="flex items-center text-gray-500">
            Checkout
          </li>
        </ol>
      </nav>

      <h1 class="text-3xl font-bold text-gray-800 mb-6">Checkout</h1>

      <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 class="text-xl font-semibold mb-4">Delivery Address</h2>
        <div id="address-list">
          <% if (addresses && addresses.address && addresses.address.length > 0) { %>
            <% addresses.address.forEach((address, index) => { %>
              <div class="address-card <%= address.isDefault ? 'selected' : '' %>" data-address-id="<%= address._id %>">
                <input type="radio" name="selectedAddress" value="<%= address._id %>" class="mr-2" <%= address.isDefault ? 'checked' : '' %>>
                <div class="flex items-center">
                  <p class="font-medium"><%= address.name %> (<%= address.addressType %>)</p>
                  <% if (address.isDefault) { %>
                    <span class="default-address">
                      <i class="fas fa-check-circle mr-1"></i>Default
                    </span>
                  <% } %>
                </div>
                <p><%= address.landMark %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                <p>Phone: <%= address.phone %></p>
                <div class="mt-2">
                  <a href="/profile/addresses/edit/<%= address._id %>?from=checkout" class="text-blue-600 hover:underline mr-4">Edit</a>
                  <button onclick="deleteAddress('<%= address._id %>')" class="text-red-600 hover:underline">Delete</button>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <p class="text-gray-500 mb-4">No addresses found. Please add a delivery address.</p>
          <% } %>
        </div>
        <a href="/profile/addresses/add?from=checkout" id="add-address-btn" class="mt-4 inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">+ Add New Address</a>
      </div>
   <div class="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 class="text-xl font-semibold mb-4">Apply Coupon</h2>
        <div class="coupon-section">
          <h3 class="text-lg font-semibold mb-2">Apply Coupon</h3>
          <div class="coupon-input-group">
            <select id="coupon-code" class="border-gray-300 focus:border-blue-600 focus:ring focus:ring-blue-200 p-2 rounded max-h-40 overflow-y-auto w-64" <%= cart.appliedCoupon ? 'disabled' : '' %>>
              <option value="">Select a coupon</option>
              <% if (coupons && coupons.length > 0) { %>
                <% coupons.forEach(coupon => { %>
                  <option 
                    value="<%= coupon.code %>" 
                    <%= !coupon.isEligible ? 'disabled' : '' %>
                  >
                    <%= coupon.code %> - <%= coupon.discountType === 'percentage' ? `${coupon.discount}% off` : `₹${coupon.discount} off` %>
                    <% if (coupon.minPurchase > 0) { %>
                      (Min. ₹<%= coupon.minPurchase %>)
                    <% } %>
                    <% if (coupon.maxDiscount > 0) { %>
                      (Max ₹<%= coupon.maxDiscount %>)
                    <% } %>
                    (Expires: <%= new Date(coupon.expiryDate).toLocaleDateString() %>)
                    <%= !coupon.isEligible ? ` - ${coupon.ineligibilityReason}` : '' %>
                  </option>
                <% }) %>
              <% } else { %>
                <option value="" disabled>No available coupons</option>
              <% } %>
            </select>
            <button id="coupon-toggle-btn" class="bg-blue-600 text-white hover:bg-blue-700 px-4 py-2 rounded" <%= cart.appliedCoupon ? '' : '' %>>
              <%= cart.appliedCoupon ? 'Remove' : 'Apply' %>
            </button>
            <% if (cart.appliedCoupon) { %>
              <div class="coupon-applied mt-2 flex items-center gap-2">
                <span>Coupon "<%= cart.appliedCoupon %>" applied</span>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <div class="order-summary-card">
    <h2 class="text-xl font-semibold text-gray-800 mb-4">Payment Method</h2>
    <p class="text-sm text-gray-600 mb-2">Wallet Balance: ₹<%= walletBalance.toFixed(2) %></p>
    <% if (cart.total > 1000) { %>
        <p class="text-sm text-red-600 mb-2">Cash on Delivery is not available for orders above ₹1000.</p>
    <% } %>
    <div class="space-y-2">
        <% if (cart.total <= 1000) { %>
            <div>
                <input type="radio" name="paymentMethod" value="COD" id="paymentCOD" checked>
                <label for="paymentCOD" class="ml-2">Cash on Delivery</label>
            </div>
        <% } %>
        <div>
            <input type="radio" name="paymentMethod" value="razorpay" id="paymentRazorpay" <%= cart.total > 1000 ? 'checked' : '' %>>
            <label for="paymentRazorpay" class="ml-2">Razorpay</label>
        </div>
        <div>
            <input type="radio" name="paymentMethod" value="wallet" id="paymentWallet" <%= walletBalance < cart.total ? 'disabled' : '' %>>
            <label for="paymentWallet" class="ml-2">Wallet <%= walletBalance < cart.total ? '(Insufficient balance)' : '' %></label>
        </div>
    </div>
</div>

      <% if (warning) { %>
        <div class="alert alert-warning">
          <i class="fas fa-exclamation-triangle"></i>
          <%= warning %>
        </div>
      <% } %>

      <div class="bg-white p-6 rounded-lg shadow-md mb-6 order-summary">
        <h2 class="text-xl font-semibold mb-4">Order Summary</h2>
        <div class="space-y-4">
          <% cart.items.forEach(item => { %>
            <div class="flex items-center order-item">
              <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="w-20 h-20 object-cover mr-4">
              <div class="flex-1">
                <p class="font-medium"><%= item.productId.productName %></p>
                <p class="text-gray-600">Quantity: <%= item.quantity %></p>
                <p class="text-gray-600">Price: ₹<%= (item.productId.salesPrice > 0 ? item.productId.salesPrice : item.productId.regularPrice).toFixed(2) %></p>
                <p class="font-semibold">Item Total: ₹<%= ((item.productId.salesPrice > 0 ? item.productId.salesPrice : item.productId.regularPrice) * item.quantity).toFixed(2) %></p>
                <% if (!item.productId || item.productId.quantity <= 0) { %>
                  <p class="text-red-500">Out of Stock</p>
                <% } else if (item.productId.isBlocked || (item.productId.category && !item.productId.category.isListed) || item.productId.status !== 'Available') { %>
                  <p class="text-red-500">Unavailable</p>
                <% } %>
              </div>
            </div>
          <% }) %>
        </div>

        <div class="mt-6 border-t pt-4">
  <div class="flex justify-between">
    <span>Subtotal</span>
    <span>₹<%= cart.subtotal.toFixed(2) %></span>
  </div>
  <div class="flex justify-between">
    <span>Shipping</span>
    <span>₹<%= cart.shipping.toFixed(2) %></span> <!-- Display fixed shipping charge -->
  </div>
  <div class="flex justify-between text-green-600">
    <span>Coupon Discount <%= cart.appliedCoupon ? `(${cart.appliedCoupon})` : '' %></span>
    <span><%= cart.discount > 0 ? `-₹${cart.discount.toFixed(2)}` : '₹0.00' %></span>
  </div>
  <div class="flex justify-between font-bold text-lg mt-2">
    <span>Total</span>
    <span>₹<%= (cart.subtotal + cart.shipping - (cart.discount || 0)).toFixed(2) %></span> <!-- Include shipping in total -->
  </div>
</div>
      </div>

      <div class="text-right">
      <form id="placeOrderForm">
  <input type="hidden" name="selectedAddressId" id="selected-address-id">
  <input type="hidden" name="finalAmount" id="final-amount" value="<%= (cart.subtotal + cart.shipping - (cart.discount || 0)).toFixed(2) %>"> <!-- Include shipping -->
  <button type="submit" class="place-order-btn" <% if (!addresses || !addresses.address || addresses.address.length === 0) { %>disabled style="opacity: 0.5; cursor: not-allowed;"<% } %>>
    <i class="fas fa-check-circle mr-2"></i> Place Order
  </button>
  <% if (!addresses || !addresses.address || addresses.address.length === 0) { %>
    <p class="text-red-500 mt-2">Please add an address before placing order</p>
  <% } %>
</form>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  
  <script>
  document.addEventListener("DOMContentLoaded", function () {
    let defaultAddress = document.querySelector(
      '.address-card.selected input[name="selectedAddress"]'
    );
    if (!defaultAddress) {
      defaultAddress = document.querySelector('input[name="selectedAddress"]');
      if (defaultAddress) {
        defaultAddress.checked = true;
        defaultAddress.closest(".address-card").classList.add("selected");
      }
    }
    if (defaultAddress) {
      document.getElementById("selected-address-id").value = defaultAddress.value;
    }

    document.querySelectorAll(".address-card").forEach((card) => {
      card.addEventListener("click", () => {
        document
          .querySelectorAll(".address-card")
          .forEach((c) => c.classList.remove("selected"));
        card.classList.add("selected");
        const radioInput = card.querySelector('input[type="radio"]');
        radioInput.checked = true;
        document.getElementById("selected-address-id").value =
          card.dataset.addressId;
      });
    });

   
  // Coupon application and removal
const couponToggleBtn = document.getElementById("coupon-toggle-btn");
const couponSelect = document.getElementById("coupon-code");
const finalAmountInput = document.getElementById("final-amount");
const totalDisplay = document.querySelector(
  ".order-summary .font-bold.text-lg span:last-child"
);

if (couponToggleBtn) {
  couponToggleBtn.addEventListener("click", async () => {
    const isRemoveAction = couponToggleBtn.textContent.trim() === "Remove";
    const couponCode = couponSelect.value.trim();

    if (isRemoveAction) {
      // Handle coupon removal
      try {
        const response = await fetch("/remove-coupon", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message,
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message,
          });
        }
      } catch (error) {
        console.error("Error removing coupon:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Failed to remove coupon",
        });
      }
    } else {
      // Handle coupon application
      if (!couponCode) {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Please select a coupon",
        });
        return;
      }

      try {
        const response = await fetch("/apply-coupon", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ couponCode }),
        });
        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: "success",
            title: "Success",
            text: data.message,
          }).then(() => {
            window.location.href = "/checkout?couponApplied=true";
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message,
          });
        }
      } catch (error) {
        console.error("Error applying coupon:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Failed to apply coupon",
        });
      }
    }
  });
}

    window.deleteAddress = async function (addressId) {
      Swal.fire({
        title: "Are you sure?",
        text: "Do you want to delete this address?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#2c3e50",
        cancelButtonColor: "#dc2626",
        confirmButtonText: "Yes, delete it!",
      }).then(async (result) => {
        if (result.isWindo.isConfirmed) {
          try {
            const response = await fetch(
              `/profile/addresses/delete/${addressId}?from=checkout`,
              {
                method: "DELETE",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
              }
            );
            const data = await response.json();
            if (data.success) {
              Swal.fire({
                icon: "success",
                title: "Deleted!",
                text: "Address deleted successfully",
                showConfirmButton: false,
                timer: 1500,
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to delete address",
              });
            }
          } catch (error) {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Failed to delete address",
            });
          }
        }
      });
    };

    async function handleOrderSuccess(orderId) {
      console.log("Success Order ID:", orderId);
      Swal.fire({
        title: "Thank You for Your Order!",
        text: "Your order has been placed successfully. You'll receive a confirmation soon.",
        confirmButtonText: "View Order Details",
        confirmButtonColor: "#16a34a",
        showCancelButton: true,
        cancelButtonText: "Continue Shopping",
        cancelButtonColor: "#3b82f6",
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = `/orders/${orderId}`;
        } else if (result.dismiss === Swal.DismissReason.cancel) {
          window.location.href = "/loadShoppingPage";
        }
      });
    }

    async function handleOrderFailure(orderId) {
      console.log("Failure Order ID:", orderId);
      Swal.fire({
        title: "Payment Failed!",
        text: "Sorry, your payment could not be processed. Please try again or contact support.",
        confirmButtonText: "Retry Payment",
        confirmButtonColor: "#dc2626",
        showCancelButton: true,
        cancelButtonText: "View Order Details",
        cancelButtonColor: "#3b82f6",
      }).then((result) => {
        if (result.isConfirmed) {
          retryPayment(orderId);
        } else if (result.dismiss === Swal.DismissReason.cancel) {
          window.location.href = `/orders/${orderId}`;
        }
      });
    }

   async function retryPayment(orderId) {
    console.log("Initiating retry payment for order:", orderId);
    try {
       const response = await fetch(`/api/orders/${orderId}/retry-payment`, {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ orderId }),
});

        const data = await response.json();
        console.log("Retry payment response:", data);

        if (data.success && data.razorpayOrderId) {
            const options = {
                key: "<%= razorpayKeyId %>",
                amount: Math.round(data.amount * 100), // Use amount from server
                currency: "INR",
                name: "PageFlow",
                description: "Retry Order Payment",
                order_id: data.razorpayOrderId,
                handler: async function (response) {
                    console.log("Razorpay payment response:", response);
                    try {
                        const verifyResponse = await fetch("/verify-payment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                orderId,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                            }),
                        });
                        const verifyData = await verifyResponse.json();
                        console.log("Payment verification response:", verifyData);

                        if (verifyData.success) {
                            handleOrderSuccess(verifyData.orderId);
                        } else {
                            console.warn("Payment verification failed:", verifyData.message);
                            handleOrderFailure(orderId);
                        }
                    } catch (error) {
                        console.error("Error during payment verification:", error);
                        handleOrderFailure(orderId);
                    }
                },
                prefill: {
                    name: "<%= user.name %>",
                    email: "<%= user.email %>",
                    contact: "<%= user.phone %>",
                },
                theme: { color: "#3b82f6" },
                modal: {
                    ondismiss: async function () {
                        console.log("Razorpay modal dismissed for order:", orderId);
                        try {
                            await fetch("/payment-failed", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    orderId,
                                    razorpay_order_id: data.razorpayOrderId,
                                    razorpay_payment_id: null,
                                    error: { description: "Payment modal closed" },
                                }),
                            });
                            handleOrderFailure(orderId);
                        } catch (error) {
                            console.error("Error recording payment failure:", error);
                            handleOrderFailure(orderId);
                        }
                    },
                },
            };

            console.log("Opening Razorpay modal with options:", options);
            const rzp1 = new Razorpay(options);
            rzp1.on('payment.error', function (error) {
                console.error("Razorpay payment error:", error);
                handleOrderFailure(orderId);
            });
            rzp1.open();
        } else {
            console.warn("Retry payment initiation failed:", data.message);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to initiate retry payment",
            });
        }
    } catch (error) {
        console.error("Error in retryPayment:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to initiate retry payment",
        });
    }
}

   const placeOrderForm = document.getElementById("placeOrderForm");
placeOrderForm.addEventListener("submit", async function (event) {
    event.preventDefault();

    const selectedAddressId = document.getElementById("selected-address-id").value;
    const paymentMethod = document.querySelector(
        'input[name="paymentMethod"]:checked'
    )?.value;
    const finalAmount = parseFloat(document.getElementById("final-amount").value);

    console.log("Client-side values:", {
        selectedAddressId,
        paymentMethod,
        finalAmount,
        displayedTotal: `<%= (cart.total).toFixed(2) %>`
    });

    if (!selectedAddressId) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Please select a delivery address",
        });
        return;
    }

    if (!paymentMethod) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Please select a payment method",
        });
        return;
    }

    if (isNaN(finalAmount) || finalAmount <= 0) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Invalid order amount",
        });
        return;
    }

    const placeOrderBtn = placeOrderForm.querySelector(".place-order-btn");
    placeOrderBtn.disabled = true;
    placeOrderBtn.textContent = "Processing...";

    try {
        const response = await fetch("/order/place", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                selectedAddressId,
                paymentMethod,
                finalAmount,
            }),
        });

        const data = await response.json();
        console.log("Order placement response:", data);

        if (data.success) {
            const orderId = data.orderId;

            if (paymentMethod === "razorpay") {
                const options = {
                    key: "<%= razorpayKeyId %>",
                    amount: data.amount * 100,
                    currency: "INR",
                    name: "PageFlow",
                    description: "Order Payment",
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        console.log("Razorpay payment response:", response);
                        try {
                            const verifyResponse = await fetch("/verify-payment", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({
                                    orderId,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                }),
                            });
                            const verifyData = await verifyResponse.json();
                            console.log("Payment verification response:", verifyData);

                            if (verifyData.success) {
                                window.location.href = verifyData.redirect || `/orders/${verifyData.orderId}`;
                            } else {
                                console.warn("Payment verification failed:", verifyData.message);
                                handleOrderFailure(orderId);
                            }
                        } catch (error) {
                            console.error("Error during payment verification:", error);
                            handleOrderFailure(orderId);
                        }
                    },
                    prefill: {
                        name: "<%= user.name %>",
                        email: "<%= user.email %>",
                        contact: "<%= user.phone %>",
                    },
                    theme: { color: "#3b82f6" },
                    modal: {
                        ondismiss: async function () {
                            console.log("Razorpay modal dismissed for order:", orderId);
                            try {
                                await fetch("/payment-failed", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({
                                        orderId,
                                        razorpay_order_id: data.razorpayOrderId,
                                        razorpay_payment_id: null,
                                        error: { description: "Payment modal closed" },
                                    }),
                                });
                                handleOrderFailure(orderId);
                            } catch (error) {
                                console.error("Error recording payment failure:", error);
                                handleOrderFailure(orderId);
                            }
                        },
                    },
                };

                console.log("Opening Razorpay modal with options:", options);
                const rzp1 = new Razorpay(options);
                rzp1.open();
            } else {
                // COD: Pass redirect to handleOrderSuccess
                handleOrderSuccess(orderId, data.redirect);
            }
        } else {
            console.warn("Order placement failed:", data.message);
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Failed to place order",
            });
            placeOrderBtn.disabled = false;
            placeOrderBtn.textContent = "Place Order";
        }
    } catch (error) {
        console.error("Error placing order:", error);
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Failed to place order",
        });
        placeOrderBtn.disabled = false;
        placeOrderBtn.textContent = "Place Order";
    }
});
  });
</script>
</body>
</html>