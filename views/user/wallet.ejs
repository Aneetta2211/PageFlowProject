<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wallet Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <%- include("../../views/partials/user/header") %>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
            margin: 0; /* Prevent default body margin */
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 50;
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
        }
        /* Profile Container and Layout */
        .profile-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: flex;
            max-width: 1350px;
            width: 90%;
            margin: 2rem auto;
            min-height: calc(100vh - 4rem); /* Flexible height */
        }
        .profile-sidebar {
            background: #2c3e50;
            color: #ffffff;
            padding: 2rem;
            width: 300px;
        }
        .profile-sidebar .card {
            background: transparent;
            border: none;
        }
        .profile-sidebar .nav-link {
            color: #d1d8e0;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 5px 0;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }
        .profile-sidebar .nav-link:hover,
        .profile-sidebar .nav-link.active {
            background: #34495e;
            color: #ffffff;
        }
        .profile-sidebar .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
            margin-right: 10px;
        }
        .profile-content {
            flex: 1;
            padding: 2rem;
            background: #ffffff;
            border-radius: 0 10px 10px 0;
            overflow-y: auto; /* Single scrollbar for entire content */
            max-height: calc(100vh - 4rem); /* Fit within viewport */
        }
        /* Breadcrumbs */
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            background: none;
        }
        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        /* Wallet Specific Styles */
        .wallet-balance-card {
            background: linear-gradient(135deg, #3b82f6, #6366f1);
            color: white;
            border-radius: 10px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .wallet-balance-amount {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 1rem 0;
        }
        .transaction-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .transaction-credit {
            border-left: 4px solid #10b981;
        }
        .transaction-debit {
            border-left: 4px solid #ef4444;
        }
        .transaction-amount {
            font-weight: bold;
        }
        .transaction-credit .transaction-amount {
            color: #10b981;
        }
        .transaction-debit .transaction-amount {
            color: #ef4444;
        }
        .transaction-date {
            color: #6b7280;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%- include("../../views/partials/user/sidebar", { currentPage: 'wallet', user: user }) %>
        <!-- Main Content -->
        <div class="profile-content">
            <!-- Breadcrumbs -->
            <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
                <ol class="flex space-x-2">
                    <li class="flex items-center">
                        <a href="/" class="hover:underline text-blue-600">Home</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center">
                        <a href="/profile/wallet" class="hover:underline text-blue-600">Wallet</a>
                    </li>
                </ol>
            </nav>

            <h1 class="text-3xl font-bold text-gray-800 mb-6">My Wallet</h1>

            <!-- Wallet Balance Card -->
            <div class="wallet-balance-card">
                <div class="flex justify-between items-start">
                    <div>
                        <h2 class="text-lg font-medium">Available Balance</h2>
                        <div class="wallet-balance-amount">₹<%= wallet.balance.toFixed(2) %></div>
                    </div>
                    <button id="addMoneyButton" onclick="openAddMoneyModal()" class="px-4 py-2 bg-white text-blue-600 rounded-lg font-medium hover:bg-gray-100 transition">
                        Add Money
                    </button>
                </div>
            </div>

            <!-- Transaction History -->
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Transaction History</h2>
            
            <% if (wallet.transactions.length === 0) { %>
                <div class="bg-white p-6 rounded-lg shadow-md text-center">
                    <p class="text-gray-600">No transactions yet.</p>
                </div>
            <% } else { %>
                <div class="space-y-3">
                    <% wallet.transactions.forEach(transaction => { %>
                        <div class="transaction-card <%= transaction.type === 'credit' ? 'transaction-credit' : 'transaction-debit' %>">
                            <div class="flex justify-between items-center">
                                <div>
                                    <h3 class="font-medium"><%= transaction.description || 'Wallet Transaction' %></h3>
                                    <p class="transaction-date">
                                        <%= new Date(transaction.date).toLocaleDateString('en-US', { 
                                            year: 'numeric', 
                                            month: 'long', 
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) %>
                                    </p>
                                </div>
                                <div class="text-right">
                                    <p class="transaction-amount">
                                        <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
                                    </p>
                                    <p class="text-xs <%= transaction.type === 'credit' ? 'text-green-500' : 'text-red-500' %>">
                                        <%= transaction.type === 'credit' ? 'Credit' : 'Debit' %>
                                    </p>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Add Money Modal -->
    <div id="addMoneyModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Add Money to Wallet</h2>
                <button onclick="closeAddMoneyModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="mb-4">
                <label for="amount" class="block text-gray-700 mb-2">Amount (₹):</label>
                <input type="number" id="amount" min="1" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="Enter amount">
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeAddMoneyModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Cancel
                </button>
                <button id="confirmAddMoneyButton" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                    Add Money
                </button>
            </div>
        </div>
    </div>

    <script>
        // Add debug logging to ensure script is loaded
        console.log('Wallet page script loaded');

        // Generate a unique request ID
        function generateRequestId() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Add Money Modal Functions
        function openAddMoneyModal() {
            console.log('Opening add money modal');
            document.getElementById('addMoneyModal').style.display = 'block';
        }

        function closeAddMoneyModal() {
            console.log('Closing add money modal');
            document.getElementById('addMoneyModal').style.display = 'none';
            document.getElementById('amount').value = '';
            // Re-enable the button
            const confirmButton = document.getElementById('confirmAddMoneyButton');
            confirmButton.disabled = false;
            confirmButton.textContent = 'Add Money';
        }

        async function addMoneyToWallet() {
            console.log('addMoneyToWallet function triggered');
            const confirmButton = document.getElementById('confirmAddMoneyButton');
            confirmButton.disabled = true;
            confirmButton.textContent = 'Processing...';

            const amount = parseFloat(document.getElementById('amount').value);
            
            if (!amount || amount <= 0) {
                console.log('Invalid amount entered:', amount);
                await Swal.fire({
                    title: 'Invalid Amount',
                    text: 'Please enter a valid amount greater than 0.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                confirmButton.disabled = false;
                confirmButton.textContent = 'Add Money';
                return;
            }

            const requestId = generateRequestId();
            console.log('Sending request to add money:', { amount, requestId });
            try {
                const response = await fetch('/wallet/add-money', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Request-ID': requestId
                    },
                    body: JSON.stringify({ amount })
                });
                
                // Log raw response if JSON parsing fails
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Non-JSON response received:', text);
                    throw new Error('Server returned non-JSON response');
                }

                const data = await response.json();
                console.log('Response from server:', data);
                
                if (response.ok) {
                    await Swal.fire({
                        title: 'Success!',
                        text: data.message || 'Money added to wallet successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    window.location.reload();
                } else {
                    console.log('Server error response:', data.error);
                    await Swal.fire({
                        title: 'Error!',
                        text: data.error || 'Failed to add money to wallet.',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                }
            } catch (error) {
                console.error('Fetch error:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred while adding money to wallet: ' + error.message,
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }
            
            closeAddMoneyModal();
        }

        // Add event listeners programmatically for debugging
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM fully loaded');
            const addMoneyButton = document.getElementById('addMoneyButton');
            const confirmAddMoneyButton = document.getElementById('confirmAddMoneyButton');
            
            if (addMoneyButton) {
                // Remove any existing listeners to prevent duplicates
                addMoneyButton.replaceWith(addMoneyButton.cloneNode(true));
                document.getElementById('addMoneyButton').addEventListener('click', () => {
                    console.log('Add Money button clicked');
                    openAddMoneyModal();
                });
            } else {
                console.error('Add Money button not found in DOM');
            }

            if (confirmAddMoneyButton) {
                // Remove any existing listeners to prevent duplicates
                confirmAddMoneyButton.replaceWith(confirmAddMoneyButton.cloneNode(true));
                document.getElementById('confirmAddMoneyButton').addEventListener('click', () => {
                    console.log('Confirm Add Money button clicked');
                    addMoneyToWallet();
                });
            } else {
                console.error('Confirm Add Money button not found in DOM');
            }
        });
    </script>
</body>
</html>