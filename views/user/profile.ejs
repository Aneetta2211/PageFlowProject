<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <%- include("../../views/partials/user/header") %>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }
        .profile-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: flex;
            max-width: 1350px;
            width: 90%;
            margin: 2rem auto;
            min-height: calc(100vh - 4rem);
        }
        .profile-sidebar {
            background: #2c3e50;
            color: #ffffff;
            padding: 2rem;
            width: 300px;
            min-height: 100%;
        }
        .profile-sidebar .card {
            background: transparent;
            border: none;
        }
        .profile-sidebar .nav-link {
            color: #d1d8e0;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 5px 0;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }
        .profile-sidebar .nav-link:hover,
        .profile-sidebar .nav-link.active {
            background: #34495e;
            color: #ffffff;
        }
        .profile-sidebar .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
            margin-right: 10px;
        }
        .profile-content {
            flex: 1;
            padding: 2rem;
            background: #ffffff;
            border-radius: 0 10px 10px 0;
            overflow-y: auto;
            max-height: calc(100vh - 4rem);
        }
        .profile-content::-webkit-scrollbar {
            width: 8px;
        }
        .profile-content::-webkit-scrollbar-thumb {
            background: #6b7280;
            border-radius: 4px;
        }
        .profile-content::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            background: none;
        }
        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        .avatar-edit {
            position: relative;
            width: 150px;
        }
        .avatar-edit img {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
        }
        .avatar-actions, .avatar-delete {
            position: absolute;
            bottom: 10px;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 5px;
            border-radius: 50%;
        }
        .avatar-actions {
            right: 30px;
        }
        .avatar-delete {
            right: 0;
        }
        .otp-timer {
            color: #d97706;
            font-size: 0.875rem;
        }
        .profile-image-container {
            position: relative;
            display: inline-block;
        }
        .image-edit-icons {
            position: absolute;
            bottom: 5px;
            right: 5px;
            display: flex;
            gap: 8px;
        }
        .image-edit-btn, .image-delete-btn {
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .image-edit-btn:hover, .image-delete-btn:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }
        .image-delete-btn {
            background: rgba(220, 38, 38, 0.7);
        }
        .image-delete-btn:hover {
            background: rgba(220, 38, 38, 0.9);
        }
        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
                min-height: auto;
            }
            .profile-sidebar {
                width: 100%;
                min-height: auto;
            }
            .profile-content {
                max-height: none;
                overflow-y: visible;
            }
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%- include("../../views/partials/user/sidebar", { currentPage: 'profile', user: user }) %>
        <!-- Main Content -->
        <div class="profile-content">
            <!-- Breadcrumbs -->
            <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
                <ol class="flex space-x-2">
                    <li class="flex items-center">
                        <a href="/" class="hover:underline text-blue-600">Home</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center text-gray-500">
                        Profile
                    </li>
                </ol>
            </nav>

            <% if (messages && messages.success) { %>
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
                    <span class="block sm:inline"><%= messages.success %></span>
                </div>
            <% } %>
            
            <% if (messages && messages.error) { %>
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
                    <span class="block sm:inline"><%= messages.error %></span>
                </div>
            <% } %>

            <% if (!editMode) { %>
                <!-- View Mode -->
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-3xl font-bold text-gray-800">Profile</h1>
                    <button onclick="toggleEditMode(true)" class="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        <i class="fas fa-edit mr-2"></i>Edit Profile
                    </button>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="bg-white p-6 rounded-lg">
                        <div class="flex justify-center">
                            <div class="profile-image-container">
                                <img src="<%= user.profileImage %>?t=<%= Date.now() %>" 
                                     class="rounded-full w-36 h-36 object-cover" 
                                     alt="Profile Image">
                                <div class="image-edit-icons">
                                    <div class="image-edit-btn" onclick="toggleEditMode(true)">
                                        <i class="fas fa-edit"></i>
                                    </div>
                                    <% if (user.profileImage && user.profileImage !== '/images/default-profile.png') { %>
                                    <div class="image-delete-btn" onclick="confirmDeleteProfileImage()">
                                        <i class="fas fa-trash"></i>
                                    </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="bg-white p-6 rounded-lg">
                        <h2 class="text-xl font-semibold mb-4">Personal Information</h2>
                        <div class="space-y-3">
                            <p><span class="font-medium">Name:</span> <%= user.name %></p>
                            <p><span class="font-medium">Email:</span> <%= user.email %></p>
                            <% if (user.phone) { %>
                                <p><span class="font-medium">Phone:</span> <%= user.phone %></p>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% } else { %>
                <!-- Edit Mode -->
                <h1 class="text-3xl font-bold text-gray-800 mb-6">Edit Profile</h1>

                <!-- Profile Image Section -->
                <form id="profileImageForm" action="/profile/update" method="POST" enctype="multipart/form-data" class="bg-white p-6 rounded-lg mb-6">
                    <h2 class="text-xl font-semibold mb-4">Profile Image</h2>
                    <div class="avatar-edit mx-auto">
                        <div class="profile-image-container">
                            <img src="<%= user.profileImage %>?t=<%= Date.now() %>" 
                                 class="rounded-full w-36 h-36 object-cover" 
                                 alt="Profile Image"
                                 id="profileImagePreview">
                            <div class="image-edit-icons">
                                <div class="image-edit-btn" onclick="document.getElementById('profileImage').click()">
                                    <i class="fas fa-edit"></i>
                                </div>
                                <% if (user.profileImage && user.profileImage !== '/images/default-profile.png') { %>
                                <div class="image-delete-btn" onclick="removeProfileImage()">
                                    <i class="fas fa-trash"></i>
                                </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <div class="mt-3 text-center">
                        <input type="file" class="hidden" name="profileImage" id="profileImage" accept="image/*">
                        <input type="hidden" name="removeProfileImage" id="removeProfileImage" value="false">
                        <p class="text-gray-500 text-sm">Recommended size: 150x150 pixels</p>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="px-5 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                            <i class="fas fa-check mr-2"></i>Update Image
                        </button>
                    </div>
                </form>

                <!-- Personal Information Section -->
                <form id="personalInfoForm" action="/profile/update" method="POST" class="bg-white p-6 rounded-lg mb-6">
                    <h2 class="text-xl font-semibold mb-4">Personal Information</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="name" class="block text-gray-700 mb-1">Name <span class="text-red-500">*</span></label>
                            <input type="text" class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                   id="name" name="name" value="<%= user.name %>" required>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Please enter your name</div>
                        </div>
                        <div>
                            <label for="phone" class="block text-gray-700 mb-1">Phone</label>
                            <input type="tel" class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                   id="phone" name="phone" value="<%= user.phone || '' %>" pattern="[0-9]{10}">
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Please enter a valid 10-digit phone number</div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="px-5 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                            <i class="fas fa-check mr-2"></i>Update Information
                        </button>
                    </div>
                </form>

                <!-- Email Settings Section -->
                <form id="emailSettingsForm" action="/profile/update" method="POST" class="bg-white p-6 rounded-lg mb-6">
                    <h2 class="text-xl font-semibold mb-4">Email Settings</h2>
                    <div class="space-y-4 flex flex-col">
                        <div>
                            <label for="email" class="block text-gray-700 mb-1">Current Email</label>
                            <input type="email" class="w-full p-3 border rounded-lg bg-gray-100" 
                                   value="<%= user.email %>" readonly>
                        </div>
                        <div>
                            <label for="newEmail" class="block text-gray-700 mb-1">New Email</label>
                            <div class="flex flex-col sm:flex-row">
                                <input type="email" class="flex-1 p-3 border rounded-t-lg sm:rounded-l-lg sm:rounded-t-none focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       id="newEmail" name="newEmail">
                                <button type="button" class="mt-2 sm:mt-0 px-4 py-3 bg-blue-600 text-white rounded-b-lg sm:rounded-r-lg sm:rounded-b-none hover:bg-blue-700" 
                                        id="sendOtpBtn">Send OTP</button>
                            </div>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Please enter a valid email address</div>
                            <div id="otpTimer" class="otp-timer hidden mt-2">
                                <i class="fas fa-clock mr-1"></i>OTP expires in: <span id="countdown">120</span>s
                            </div>
                        </div>
                        <div id="otpSection" class="hidden">
                            <label for="otp" class="block text-gray-700 mb-1">Enter OTP <span class="text-red-500">*</span></label>
                            <div class="flex flex-col sm:flex-row">
                                <input type="text" class="flex-1 p-3 border rounded-t-lg sm:rounded-l-lg sm:rounded-t-none focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       id="otp" name="otp" required>
                                <button type="button" class="mt-2 sm:mt-0 px-4 py-3 bg-green-600 text-white rounded-b-lg sm:rounded-r-lg sm:rounded-b-none hover:bg-green-700" 
                                        id="verifyOtpBtn">Verify OTP</button>
                            </div>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Please enter a valid OTP</div>
                            <div id="otpVerificationStatus" class="mt-2"></div>
                            <button type="button" class="mt-2 text-blue-600 hover:underline" id="resendOtpBtn" disabled>Resend OTP</button>
                        </div>
                        <div>
                            <button type="submit" class="px-5 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700" id="updateEmailBtn" disabled>
                                <i class="fas fa-check mr-2"></i>Update Email
                            </button>
                        </div>
                    </div>
                </form>

                <!-- Password Settings Section -->
                <form id="passwordSettingsForm" action="/profile/update" method="POST" class="bg-white p-6 rounded-lg mb-6">
                    <h2 class="text-xl font-semibold mb-4">Password Settings</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="currentPassword" class="block text-gray-700 mb-1">Current Password</label>
                            <div class="flex">
                                <input type="password" class="flex-1 p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       id="currentPassword" name="currentPassword">
                                <button class="px-4 bg-gray-200 text-gray-700 rounded-r-lg hover:bg-gray-300" 
                                        type="button" id="toggleCurrentPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Please enter your current password</div>
                        </div>
                        <div>
                            <label for="newPassword" class="block text-gray-700 mb-1">New Password</label>
                            <div class="flex">
                                <input type="password" class="flex-1 p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       id="newPassword" name="newPassword" minlength="8">
                                <button class="px-4 bg-gray-200 text-gray-700 rounded-r-lg hover:bg-gray-300" 
                                        type="button" id="toggleNewPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Password must be at least 8 characters</div>
                        </div>
                        <div>
                            <label for="confirmPassword" class="block text-gray-700 mb-1">Confirm Password</label>
                            <div class="flex">
                                <input type="password" class="flex-1 p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       id="confirmPassword" name="confirmPassword">
                                <button class="px-4 bg-gray-200 text-gray-700 rounded-r-lg hover:bg-gray-300" 
                                        type="button" id="toggleConfirmPassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                            <div class="invalid-feedback text-red-500 text-sm mt-1 hidden">Passwords must match</div>
                        </div>
                    </div>
                    <div class="mt-4">
                        <button type="submit" class="px-5 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">
                            <i class="fas fa-check mr-2"></i>Update Password
                        </button>
                    </div>
                </form>

                <div class="flex justify-end">
                    <button type="button" onclick="toggleEditMode(false)" 
                            class F="px-6 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400">
                        <i class="fas fa-times mr-2"></i>Cancel
                    </button>
                </div>
            <% } %>
        </div>
    </div>
   
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Toggle between view and edit modes
        function toggleEditMode(showEdit) {
            window.location.href = showEdit ? '/profile?edit=true' : '/profile';
        }

        // Toggle password visibility
        function togglePasswordVisibility(input, icon) {
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        // Setup password visibility toggles
        document.addEventListener('DOMContentLoaded', function() {
            ['currentPassword', 'newPassword', 'confirmPassword'].forEach(id => {
                const toggleBtn = document.getElementById(`toggle${id.charAt(0).toUpperCase() + id.slice(1)}`);
                if (toggleBtn) {
                    console.log(`Attaching listener for ${id} toggle button`);
                    toggleBtn.addEventListener('click', function() {
                        const input = document.getElementById(id);
                        const icon = this.querySelector('i');
                        togglePasswordVisibility(input, icon);
                    });
                } else {
                    console.warn(`Toggle button for ${id} not found`);
                }
            });
        });

        // Profile Image Handling
        document.addEventListener('DOMContentLoaded', function() {
            const profileImageInput = document.getElementById('profileImage');
            if (profileImageInput) {
                console.log('Attaching listener for profile image input');
                profileImageInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = function(event) {
                            document.getElementById('profileImagePreview').src = event.target.result;
                            document.getElementById('removeProfileImage').value = 'false';
                            Swal.fire({
                                icon: 'success',
                                title: 'Profile Image Selected',
                                text: 'Click Update Image to save your profile picture',
                                showConfirmButton: false,
                                timer: 1500
                            });
                        };
                        reader.readAsDataURL(file);
                    }
                });
            } else {
                console.warn('Profile image input not found');
            }
        });

        function removeProfileImage() {
            document.getElementById('profileImagePreview').src = '/images/default-profile.png';
            document.getElementById('profileImage').value = '';
            document.getElementById('removeProfileImage').value = 'true';
            Swal.fire({
                icon: 'success',
                title: 'Profile Image Removed',
                text: 'Click Update Image to save changes',
                showConfirmButton: false,
                timer: 1500
            });
        }

        // Delete Profile Image Confirmation
        function confirmDeleteProfileImage() {
            Swal.fire({
                title: 'Delete Profile Picture?',
                text: 'Are you sure you want to remove your profile picture?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/profile/delete-image', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include' // Include session cookies
                    })
                    .then(response => {
                        console.log('Delete image response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            document.querySelectorAll('img[alt="Profile Image"]').forEach(img => {
                                img.src = '/images/default-profile.png?t=' + Date.now();
                            });
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: 'Your profile picture has been removed.',
                                showConfirmButton: false,
                                timer: 1500
                            });
                            setTimeout(() => window.location.reload(), 1500);
                        } else {
                            console.log('Delete image failed:', data.message);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: data.message || 'Failed to delete profile picture'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting profile image:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to delete profile picture'
                        });
                    });
                }
            });
        }

        // OTP Timer Logic
        let otpTimer;
        function startOtpTimer() {
            let timeLeft = 120; // 2 minutes
            const countdown = document.getElementById('countdown');
            const otpTimerDiv = document.getElementById('otpTimer');
            const resendOtpBtn = document.getElementById('resendOtpBtn');
            countdown.textContent = timeLeft;
            clearInterval(otpTimer);
            otpTimer = setInterval(function() {
                timeLeft--;
                countdown.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(otpTimer);
                    otpTimerDiv.classList.add('hidden');
                    sessionStorage.removeItem('emailForVerification');
                    sessionStorage.removeItem('emailVerified');
                    sessionStorage.removeItem('verifiedEmail');
                    document.getElementById('otpSection').classList.add('hidden');
                    document.getElementById('updateEmailBtn').disabled = true;
                    if (resendOtpBtn) {
                        resendOtpBtn.disabled = false;
                        resendOtpBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    }
                    Swal.fire({
                        icon: 'error',
                        title: 'OTP Expired',
                        text: 'Please resend the OTP to try again.',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            }, 1000);
        }

        // Send OTP Button Logic
        document.addEventListener('DOMContentLoaded', function() {
            const sendOtpBtn = document.getElementById('sendOtpBtn');
            if (sendOtpBtn) {
                console.log('Send OTP button found, attaching listener');
                sendOtpBtn.addEventListener('click', function(event) {
                    event.preventDefault();
                    const emailInput = document.getElementById('newEmail');
                    const email = emailInput.value.trim();
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    const invalidFeedback = emailInput.nextElementSibling;
                    if (!email || !emailRegex.test(email)) {
                        console.log('Invalid email:', email);
                        emailInput.classList.add('border-red-500');
                        if (invalidFeedback) invalidFeedback.classList.remove('hidden');
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Email',
                            text: 'Please enter a valid email address',
                            showConfirmButton: false,
                            timer: 2000
                        });
                        return;
                    }
                    emailInput.classList.remove('border-red-500');
                    if (invalidFeedback) invalidFeedback.classList.add('hidden');
                    console.log('Sending OTP to:', email);
                    fetch('/profile/send-otp', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({ email })
                    })
                    .then(response => {
                        console.log('Send OTP response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json().then(data => ({ status: response.status, data }));
                    })
                    .then(({ status, data }) => {
                        console.log('Send OTP response data:', data);
                        if (status === 200 && data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'OTP Sent',
                                text: 'Check your email for the OTP.',
                                showConfirmButton: false,
                                timer: 2000
                            });
                            document.getElementById('otpSection').classList.remove('hidden');
                            document.getElementById('otpTimer').classList.remove('hidden');
                            document.getElementById('resendOtpBtn').disabled = true;
                            document.getElementById('resendOtpBtn').classList.add('opacity-50', 'cursor-not-allowed');
                            startOtpTimer();
                            sessionStorage.setItem('emailForVerification', email);
                        } else {
                            console.log('Send OTP failed:', data.message);
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: data.message || 'Failed to send OTP',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error sending OTP:', error);
                        let errorMessage = 'Failed to send OTP. Check network or server status.';
                        if (error.message.includes('401')) {
                            errorMessage = 'Not authenticated. Please log in again.';
                        } else if (error.message.includes('500')) {
                            errorMessage = 'Server error. Please try again later.';
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    });
                });
            } else {
                console.error('Send OTP button not found in DOM');
            }
        });

        // Verify OTP Button Logic
        document.addEventListener('DOMContentLoaded', function() {
            const verifyOtpBtn = document.getElementById('verifyOtpBtn');
            if (verifyOtpBtn) {
                console.log('Verify OTP button found, attaching listener');
                verifyOtpBtn.addEventListener('click', function(event) {
                    event.preventDefault();
                    const otpInput = document.getElementById('otp');
                    const otp = otpInput.value.trim();
                    const email = document.getElementById('newEmail').value.trim() || sessionStorage.getItem('emailForVerification');
                    const invalidFeedback = otpInput.nextElementSibling;
                    if (!otp) {
                        console.log('No OTP entered');
                        otpInput.classList.add('border-red-500');
                        if (invalidFeedback) invalidFeedback.classList.remove('hidden');
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid OTP',
                            text: 'Please enter a valid OTP',
                            showConfirmButton: false,
                            timer: 2000
                        });
                        return;
                    }
                    otpInput.classList.remove('border-red-500');
                    if (invalidFeedback) invalidFeedback.classList.add('hidden');
                    console.log('Verifying OTP for email:', email, 'OTP:', otp);
                    fetch('/profile/verify-otp', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({ email, otp })
                    })
                    .then(response => {
                        console.log('Verify OTP response status:', response.status);
                        return response.json().then(data => ({ status: response.status, data }));
                    })
                    .then(({ status, data }) => {
                        console.log('Verify OTP response data:', data);
                        const otpVerificationStatus = document.getElementById('otpVerificationStatus');
                        if (status === 200 && data.success) {
                            clearInterval(otpTimer);
                            document.getElementById('otpTimer').classList.add('hidden');
                            document.getElementById('otpSection').classList.add('hidden');
                            document.getElementById('updateEmailBtn').disabled = false;
                            sessionStorage.setItem('emailVerified', 'true');
                            sessionStorage.setItem('verifiedEmail', email);
                            otpVerificationStatus.innerHTML = '<span class="text-green-600">OTP verified successfully!</span>';
                            Swal.fire({
                                icon: 'success',
                                title: 'OTP Verified',
                                text: 'You can now update your email.',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        } else {
                            console.log('Verify OTP failed:', data.message);
                            otpInput.classList.add('border-red-500');
                            if (invalidFeedback) invalidFeedback.classList.remove('hidden');
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: data.message || 'Invalid OTP',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error verifying OTP:', error);
                        let errorMessage = 'Failed to verify OTP. Check network or server status.';
                        if (error.message.includes('401')) {
                            errorMessage = 'Not authenticated. Please log in again.';
                        } else if (error.message.includes('500')) {
                            errorMessage = 'Server error. Please try again later.';
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    });
                });
            } else {
                console.error('Verify OTP button not found in DOM');
            }
        });

        // Resend OTP Button Logic
        document.addEventListener('DOMContentLoaded', function() {
            const resendOtpBtn = document.getElementById('resendOtpBtn');
            if (resendOtpBtn) {
                console.log('Resend OTP button found, attaching listener');
                resendOtpBtn.addEventListener('click', function(event) {
                    event.preventDefault();
                    const email = document.getElementById('newEmail').value.trim() || sessionStorage.getItem('emailForVerification');
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!email || !emailRegex.test(email)) {
                        console.log('Invalid email for resend:', email);
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Email',
                            text: 'Please enter a valid email address to resend OTP',
                            showConfirmButton: false,
                            timer: 2000
                        });
                        return;
                    }
                    console.log('Resending OTP to:', email);
                    fetch('/profile/resend-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify({ email })
                    })
                    .then(response => {
                        console.log('Resend OTP response status:', response.status);
                        return response.json().then(data => ({ status: response.status, data }));
                    })
                    .then(({ status, data }) => {
                        console.log('Resend OTP response data:', data);
                        if (status === 200 && data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'OTP Resent',
                                text: 'A new OTP has been sent to your email.',
                                showConfirmButton: false,
                                timer: 2000
                            });
                            document.getElementById('otpSection').classList.remove('hidden');
                            document.getElementById('otpTimer').classList.remove('hidden');
                            document.getElementById('resendOtpBtn').disabled = true;
                            document.getElementById('resendOtpBtn').classList.add('opacity-50', 'cursor-not-allowed');
                            document.getElementById('otp').value = '';
                            startOtpTimer();
                        } else {
                            console.log('Resend OTP failed:', data.message);
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: data.message || 'Failed to resend OTP',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error resending OTP:', error);
                        let errorMessage = 'Failed to resend OTP. Check network or server status.';
                        if (error.message.includes('401')) {
                            errorMessage = 'Not authenticated. Please log in again.';
                        } else if (error.message.includes('500')) {
                            errorMessage = 'Server error. Please try again later.';
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            showConfirmButton: false,
                            timer: 2000
                        });
                    });
                });
            } else {
                console.error('Resend OTP button not found in DOM');
            }
        });

       document.getElementById('profileImageForm')?.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const form = this;
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;
    
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Uploading...';

    const formData = new FormData(form);
    
    fetch(form.action, {
        method: 'POST',
        body: formData,
        credentials: 'include'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            document.querySelectorAll('img[alt="Profile Image"]').forEach(img => {
                img.src = data.profileImage + '?t=' + Date.now();
            });
            
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message || 'Profile image updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            });
        } else {
            throw new Error(data.message || 'Failed to update profile image');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        let errorMessage = error.message || 'Failed to update profile image';
        if (error.message.includes('Only images')) {
            errorMessage = 'Only images (jpeg, jpg, png, webp, gif) are allowed';
        } else if (error.message.includes('File too large')) {
            errorMessage = 'File size exceeds 5MB limit';
        }
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: errorMessage,
            showConfirmButton: true
        });
    })
    .finally(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnText;
    });
});

        // Form Submission Handling
        document.addEventListener('DOMContentLoaded', function() {
            const forms = [
                document.getElementById('personalInfoForm'),
                document.getElementById('emailSettingsForm'),
                document.getElementById('passwordSettingsForm')
            ];

            forms.forEach(form => {
                if (form) {
                    form.addEventListener('submit', function(event) {
                        event.preventDefault();
                        const formData = new FormData(form);
                        fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'Accept': 'application/json'
                            },
                            credentials: 'include'
                        })
                        .then(response => {
                            console.log('Form submission response status:', response.status);
                            return response.json().then(data => ({ status: response.status, data }));
                        })
                        .then(({ status, data }) => {
                            console.log('Form submission response data:', data);
                            if (status === 200 && data.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Success',
                                    text: data.message || 'Profile updated successfully',
                                    showConfirmButton: false,
                                    timer: 2000
                                }).then(() => {
                                    if (data.redirect) {
                                        window.location.href = data.redirect;
                                    } else {
                                        window.location.reload();
                                    }
                                });
                            } else {
                                console.log('Form submission failed:', data.message);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Failed',
                                    text: data.message || 'Failed to update profile',
                                    showConfirmButton: false,
                                    timer: 2000
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error submitting form:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to update profile. Please try again.',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        });
                    });
                }
            });
        });
    </script>
</body>
</html>