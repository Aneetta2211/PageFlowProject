<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <%- include("../../views/partials/user/header") %>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
            margin: 0;
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 50;
        }
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
        }
        .status-delivered { color: #16a34a; }
        .status-cancelled { color: #dc2626; }
        .status-pending { color: #d97706; }
        .status-return-request { color: #f59e0b; }
        .status-returned { color: #ea580c; }
        .status-return-denied { color: #dc2626; }
        .status-payment-failed { color: #b91c1c; }
        .profile-container {
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            display: flex;
            max-width: 1350px;
            width: 90%;
            margin: 2rem auto;
            min-height: calc(100vh - 4rem);
        }
        .profile-sidebar {
            background: #2c3e50;
            color: #ffffff;
            padding: 2rem;
            width: 300px;
        }
        .profile-sidebar .card {
            background: transparent;
            border: none;
        }
        .profile-sidebar .nav-link {
            color: #d1d8e0;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 5px 0;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
        }
        .profile-sidebar .nav-link:hover,
        .profile-sidebar .nav-link.active {
            background: #34495e;
            color: #ffffff;
        }
        .profile-sidebar .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
            margin-right: 10px;
        }
        .profile-content {
            flex: 1;
            padding: 2rem;
            background: #ffffff;
            border-radius: 0 10px 10px 0;
            overflow-y: auto;
            max-height: calc(100vh - 4rem);
        }
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
            background: none;
        }
        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
            gap: 0.5rem;
        }
        .pagination a, .pagination span {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            text-decoration: none;
        }
        .pagination a {
            background-color: #e5e7eb;
            color: #4b5563;
            transition: all 0.2s;
        }
        .pagination a:hover {
            background-color: #d1d5db;
        }
        .pagination .active {
            background-color: #3b82f6;
            color: white;
        }
        .pagination .disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <%- include("../../views/partials/user/sidebar", { currentPage: 'orders', user: user }) %>
        <div class="profile-content">
            <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
                <ol class="flex space-x-2">
                    <li class="flex items-center">
                        <a href="/" class="hover:underline text-blue-600">Home</a>
                        <span class="mx-2 text-gray-400">/</span>
                    </li>
                    <li class="flex items-center">
                        <a href="/profile/orders" class="hover:underline text-blue-600">Orders</a>
                    </li>
                </ol>
            </nav>

            <h1 class="text-3xl font-bold text-gray-800 mb-6">Orders</h1>

            <% if (orders.length === 0) { %>
                <div class="bg-white p-6 rounded-lg shadow-md text-center">
                    <p class="text-gray-600 mb-4">You haven't placed any orders yet.</p>
                    <a href="/loadShoppingPage" class="inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                        Browse Products
                    </a>
                </div>
            <% } else { %>
                <div class="mb-6">
                    <input type="text" id="searchInput" placeholder="Search orders by ID..." 
                           class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                </div>

                <div id="orderList" class="space-y-6">
                    <% orders.forEach(order => { %>
                        <div class="bg-white p-6 rounded-lg shadow-md order-card" data-order-id="<%= order.orderId %>">
                            <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                                <div class="space-y-2">
                                    <h2 class="text-xl font-semibold"><%= order.orderId %></h2>
                                    <p class="text-gray-600">
                                        <i class="far fa-calendar-alt mr-1"></i>
                                        <%= new Date(order.createdOn).toLocaleDateString('en-US', { 
                                            year: 'numeric', 
                                            month: 'long', 
                                            day: 'numeric' 
                                        }) %>
                                    </p>
                                    <p class="text-gray-600">
                                        Status: 
                                        <span class="font-medium status-<%= order.status.toLowerCase().replace(' ', '-') %>">
                                            <%= order.status %>
                                            <% if (order.returnRequested && order.returnStatus === 'Approved') { %>
                                                (Return Accepted)
                                            <% } else if (order.returnRequested && order.returnStatus === 'Denied') { %>
                                                (Return Denied)
                                            <% } else if (order.returnRequested && order.returnStatus === 'Pending') { %>
                                                (Return Pending)
                                            <% } %>
                                        </span>
                                    </p>
                                    <p class="text-gray-600">
                                        <i class="fas fa-receipt mr-1"></i>
                                        Total: â‚¹<%= order.finalAmount.toFixed(2) %>
                                    </p>
                                </div>
                                <div class="flex flex-wrap gap-2">
                                    <a href="/orders/<%= order.orderId %>" 
                                       class="flex items-center px-3 py-2 bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 transition">
                                        <i class="fas fa-eye mr-2"></i> Details
                                    </a>
                                   <% if (order.status === 'Payment Failed') { %>
    <button onclick="retryPayment('<%= order.orderId %>', '<%= order.finalAmount %>')" 
            class="flex items-center px-3 py-2 bg-yellow-100 text-yellow-800 rounded-lg hover:bg-yellow-200 transition">
        <i class="fas fa-redo-alt mr-2"></i> Retry Payment
    </button>
                                    <% } else if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned' && order.status !== 'Return Request') { %>
                                        <button onclick="openCancelModal('<%= order.orderId %>')" 
                                                class="flex items-center px-3 py-2 bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition">
                                            <i class="fas fa-times-circle mr-2"></i> Cancel
                                        </button>
                                    <% } %>
                                    <% if (order.status === 'Delivered' && !order.returnRequested) { %>
                                        <button onclick="openReturnModal('<%= order.orderId %>')" 
                                                class="flex items-center px-3 py-2 bg-orange-100 text-orange-800 rounded-lg hover:bg-orange-200 transition">
                                            <i class="fas fa-undo-alt mr-2"></i> Return
                                        </button>
                                    <% } %>
                                    <a href="/api/orders/<%= order.orderId %>/invoice" 
                                       class="flex items-center px-3 py-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition">
                                        <i class="fas fa-file-download mr-2"></i> Invoice
                                    </a>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>

                <% if (pagination.totalPages > 1) { %>
                <div class="pagination">
                    <% if (pagination.hasPrev) { %>
                        <a href="/profile/orders?page=<%= pagination.currentPage - 1 %>&limit=<%= pagination.limit %>" class="page-link">
                            <i class="fas fa-chevron-left"></i> Previous
                        </a>
                    <% } else { %>
                        <span class="page-link disabled">
                            <i class="fas fa-chevron-left"></i> Previous
                        </span>
                    <% } %>

                    <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                        <% if (i === pagination.currentPage) { %>
                            <span class="active"><%= i %></span>
                        <% } else { %>
                            <a href="/profile/orders?page=<%= i %>&limit=<%= pagination.limit %>"><%= i %></a>
                        <% } %>
                    <% } %>

                    <% if (pagination.hasNext) { %>
                        <a href="/profile/orders?page=<%= pagination.currentPage + 1 %>&limit=<%= pagination.limit %>" class="page-link">
                            Next <i class="fas fa-chevron-right"></i>
                        </a>
                    <% } else { %>
                        <span class="page-link disabled">
                            Next <i class="fas fa-chevron-right"></i>
                        </span>
                    <% } %>
                </div>
                <% } %>
            <% } %>
        </div>
    </div>

    <div id="cancelModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Cancel Order</h2>
                <button onclick="closeCancelModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4">Are you sure you want to cancel this order? This action cannot be undone.</p>
            <input type="hidden" id="cancelOrderID">
            <div class="mb-4">
                <label for="cancelReason" class="block text-gray-700 mb-2">Reason for Cancellation:</label>
                <select id="cancelReason" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500">
                    <option value="" selected>Select a reason</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                    <option value="Delivery time too long">Delivery time too long</option>
                    <option value="Other">Other</option>
                </select>
                <label for="cancelReasonDetails" class="block text-gray-700 mt-4 mb-2">Additional Details (Optional):</label>
                <textarea id="cancelReasonDetails" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" rows="4" placeholder="Provide additional details for cancellation"></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeCancelModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Close
                </button>
                <button onclick="confirmCancelOrder()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <div id="returnModal" class="modal">
        <div class="modal-content">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Return Order</h2>
                <button onclick="closeReturnModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <p class="mb-4">Please provide a reason for returning this order.</p>
            <input type="hidden" id="returnOrderID">
            <div class="mb-4">
                <label for="returnReason" class="block text-gray-700 mb-2">Reason for Return (Required):</label>
                <textarea id="returnReason" class="w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500" rows="4" required></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button onclick="closeReturnModal()" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition">
                    Close
                </button>
                <button onclick="confirmReturnOrder()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
                    Submit Return
                </button>
            </div>
        </div>
    </div>

    <script>
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase().trim();
            const orderCards = document.querySelectorAll('.order-card');
            orderCards.forEach(card => {
                const orderID = card.dataset.orderId.toLowerCase();
                card.style.display = orderID.includes(searchTerm) ? '' : 'none';
            });
        });

        function openCancelModal(orderID) {
            console.log('Opening cancel modal with orderID:', orderID);
            if (!orderID) {
                console.error('No orderID provided to openCancelModal');
                Swal.fire({
                    title: 'Error!',
                    text: 'Invalid order ID. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            const cancelOrderInput = document.getElementById('cancelOrderID');
            if (!cancelOrderInput) {
                console.error('cancelOrderID input element not found in DOM');
                Swal.fire({
                    title: 'Error!',
                    text: 'Internal error: Cancel modal not properly initialized.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            cancelOrderInput.value = orderID;
            console.log('Set cancelOrderID input value to:', cancelOrderInput.value);
            document.getElementById('cancelModal').style.display = 'block';
        }

        function closeCancelModal() {
            console.log('Closing cancel modal');
            document.getElementById('cancelModal').style.display = 'none';
            const cancelReasonInput = document.getElementById('cancelReason');
            const cancelReasonDetailsInput = document.getElementById('cancelReasonDetails');
            if (cancelReasonInput) cancelReasonInput.value = '';
            if (cancelReasonDetailsInput) cancelReasonDetailsInput.value = '';
        }

        function openReturnModal(orderID) {
            console.log('Opening return modal with orderID:', orderID);
            if (!orderID) {
                console.error('No orderID provided to openReturnModal');
                Swal.fire({
                    title: 'Error!',
                    text: 'Invalid order ID. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            document.getElementById('returnOrderID').value = orderID;
            document.getElementById('returnModal').style.display = 'block';
        }

        function closeReturnModal() {
            console.log('Closing return modal');
            document.getElementById('returnModal').style.display = 'none';
            const returnReasonInput = document.getElementById('returnReason');
            if (returnReasonInput) returnReasonInput.value = '';
        }

async function retryPayment(orderId, amount) {
    console.log('Attempting to retry payment for order:', { orderId, amount });
    if (!orderId || !amount) {
        console.error('Invalid orderId or amount for retryPayment:', { orderId, amount });
        await Swal.fire({
            title: 'Error!',
            text: 'Invalid order or amount. Please try again.',
            icon: 'error',
            confirmButtonColor: '#3085d6'
        });
        return;
    }

    try {
        const response = await fetch(`/api/orders/${encodeURIComponent(orderId)}/retry-payment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include'
        });

        console.log('Retry payment response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('Error response:', errorText);
            throw new Error(errorText || 'Failed to initiate payment retry');
        }

        const data = await response.json();
        console.log('Retry payment response data:', data);

        if (!data.razorpayOrderId) {
            throw new Error('Missing Razorpay order ID in response');
        }

        const options = {
            key: data.key || '<%= process.env.RAZORPAY_KEY_ID %>', // Use key from response or fallback to template
            amount: data.amount,
            currency: data.currency || 'INR',
            name: 'Your Store Name',
            description: `Retry Payment for Order ${orderId}`,
            order_id: data.razorpayOrderId,
           handler: async function (response) {
    console.log('Payment response:', response);
    try {
        const verifyResponse = await fetch('/api/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                orderId: orderId,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature
            })
        });

        const verifyData = await verifyResponse.json();
        console.log('Payment verification response:', verifyData);

        if (!verifyResponse.ok) {
            throw new Error(verifyData.message || 'Payment verification failed');
        }

        await Swal.fire({
            title: 'Payment Successful!',
            text: verifyData.message || 'Your payment was processed successfully.',
            icon: 'success',
            confirmButtonColor: '#3085d6'
        });
        window.location.reload();
    } catch (error) {
        console.error('Error verifying payment:', error);
        await Swal.fire({
            title: 'Verification Failed!',
            text: error.message || 'Payment verification failed. Please contact support.',
            icon: 'error',
            confirmButtonColor: '#3085d6',
                        showCancelButton: true,
                        cancelButtonText: 'View Order Details',
                        confirmButtonText: 'Retry Payment'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            retryPayment(orderId, amount);
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            window.location.href = `/orders/${orderId}`;
                        }
                    });
                }
            },
            prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>',
                contact: '<%= user.phone %>'
            },
            theme: {
                color: '#3b82f6'
            }
        };

        const rzp = new Razorpay(options);
        rzp.on('payment.failed', async function (response) {
            console.error('Payment failed:', response.error);
            await Swal.fire({
                title: 'Payment Failed!',
                text: response.error.description || 'Payment attempt failed. Please try again.',
                icon: 'error',
                confirmButtonColor: '#3085d6',
                showCancelButton: true,
                cancelButtonText: 'View Order Details',
                confirmButtonText: 'Retry Payment'
            }).then((result) => {
                if (result.isConfirmed) {
                    retryPayment(orderId, amount);
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    window.location.href = `/orders/${orderId}`;
                }
            });
        });
        rzp.open();
    } catch (error) {
        console.error('Error initiating retry payment:', error);
        await Swal.fire({
            title: 'Error!',
            text: `Failed to initiate payment retry: ${error.message}`,
            icon: 'error',
            confirmButtonColor: '#3085d6',
            showCancelButton: true,
            cancelButtonText: 'View Order Details',
            confirmButtonText: 'Retry Payment'
        }).then((result) => {
            if (result.isConfirmed) {
                retryPayment(orderId, amount);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                window.location.href = `/orders/${orderId}`;
            }
        });
    }
}

        async function confirmCancelOrder() {
            const orderId = document.getElementById('cancelOrderID')?.value;
            const reason = document.getElementById('cancelReason')?.value || '';
            const details = document.getElementById('cancelReasonDetails')?.value?.trim() || '';

            let finalReason = reason;
            if (reason && details) {
                finalReason = `${reason}: ${details}`;
            } else if (!reason && details) {
                finalReason = details;
            } else if (!reason && !details) {
                finalReason = '';
            }

            console.log('Attempting to cancel order:', { orderId, reason: finalReason });

            if (!orderId) {
                console.error('No orderId found in cancelOrderID input');
                await Swal.fire({
                    title: 'Error!',
                    text: 'Invalid order ID. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                closeCancelModal();
                return;
            }

            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you really want to cancel this order? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No, keep it'
            });

            if (!result.isConfirmed) {
                console.log('Cancellation aborted by user');
                closeCancelModal();
                return;
            }

            try {
                const response = await fetch(`/api/orders/${encodeURIComponent(orderId)}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ reason: finalReason })
                });

                console.log('Fetch response status:', response.status);
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const text = await response.text();
                    console.error('Non-JSON response received:', text);
                    throw new Error('Server returned non-JSON response');
                }

                const data = await response.json();
                console.log('Server response data:', data);

                if (response.ok) {
                    await Swal.fire({
                        title: 'Cancelled!',
                        text: data.message || 'Order cancelled successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    window.location.reload();
                } else {
                    await Swal.fire({
                        title: 'Error!',
                        text: data.error || 'Failed to cancel order.',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: `An error occurred while cancelling the order: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }

            closeCancelModal();
        }

        async function confirmReturnOrder() {
            const orderId = document.getElementById('returnOrderID')?.value;
            const reason = document.getElementById('returnReason')?.value;
            console.log('Attempting to submit return for order:', { orderId, reason });

            if (!orderId) {
                console.error('No orderId found in returnOrderID input');
                await Swal.fire({
                    title: 'Error!',
                    text: 'Invalid order ID. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            if (!reason?.trim()) {
                await Swal.fire({
                    title: 'Missing Reason!',
                    text: 'Please provide a reason for the return.',
                    icon: 'warning',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            const result = await Swal.fire({
                title: 'Confirm Return',
                text: 'Are you sure you want to submit this return request?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#f97316',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, submit it!',
                cancelButtonText: 'No, cancel'
            });

            if (!result.isConfirmed) {
                console.log('Return request aborted by user');
                closeReturnModal();
                return;
            }

            try {
                const response = await fetch(`/api/orders/${encodeURIComponent(orderId)}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    credentials: 'include',
                    body: JSON.stringify({ reason })
                });

                console.log('Fetch response status:', response.status);
                const data = await response.json();
                console.log('Server response data:', data);

                if (response.ok) {
                    await Swal.fire({
                        title: 'Return Submitted!',
                        text: data.message || 'Return request submitted successfully.',
                        icon: 'success',
                        confirmButtonColor: '#3085d6'
                    });
                    window.location.reload();
                } else {
                    await Swal.fire({
                        title: 'Error!',
                        text: data.error || 'Failed to process return.',
                        icon: 'error',
                        confirmButtonColor: '#3085d6'
                    });
                }
            } catch (error) {
                console.error('Error processing return:', error);
                await Swal.fire({
                    title: 'Error!',
                    text: `An error occurred while processing the return: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }

            closeReturnModal();
        }
    </script>
</body>
</html>