<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Order Details</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
            margin: 0;
        }
        .status-delivered { color: #16a34a; }
        .status-cancelled { color: #dc2626; }
        .status-pending { color: #d97706; }
        .status-shipped { color: #2563eb; }
        .status-out-for-delivery { color: #7c3aed; }
        .status-returned { color: #ea580c; }
        .status-return-denied { color: #dc2626; }
        .status-return-request { color: #f59e0b; }
        .sidebar {
            width: 250px;
            background-color: #343a40;
            color: white;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding-top: 20px;
        }
        .sidebar h2 {
            margin: 0;
            padding: 20px 10px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .sidebar ul li {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .sidebar ul li a {
            padding: 15px 20px;
            display: block;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s;
        }
        .sidebar ul li a:hover,
        .sidebar ul li a.active {
            background-color: rgba(255, 255, 255, 0.1);
            color: #fff;
        }
        .sidebar ul li a i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        .content {
            margin-left: 250px;
            padding: 20px;
            width: calc(100% - 250px);
            min-height: calc(100vh - 40px);
        }
        .breadcrumb {
            font-size: 0.875rem;
            color: #6b7280;
            margin-bottom: 1.5rem;
        }
        .breadcrumb-item a {
            color: #3b82f6;
            text-decoration: none;
        }
        .breadcrumb-item a:hover {
            text-decoration: underline;
        }
        .address-container {
            background: #f9fafb;
            padding: 1rem;
            border-radius: 8px;
            word-break: break-word;
        }
        .warning-message {
            background-color: #fef2f2;
            color: #dc2626;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h2 class="text-center">Admin</h2>
        <ul>
            <li><a href="/admin"><i class="fa fa-tachometer-alt"></i> Dashboard</a></li>
            <li><a href="/admin/customers"><i class="fa fa-users"></i> Customers</a></li>
            <li><a href="/admin/category"><i class="fa fa-th-large"></i> Category</a></li>
            <li><a href="/admin/add-product"><i class="fa fa-plus"></i> Add Products</a></li>
            <li><a href="/admin/products"><i class="fa fa-box"></i> Products</a></li>
            <li><a href="/admin/orders" class="active"><i class="fa fa-shopping-cart"></i> Orders</a></li>
             <li><a href="/admin/orders"><i class="fa fa-shopping-cart"></i> Coupons</a></li>
                    <li><a href="/admin/wallet"><i class="fa fa-wallet"></i> Wallet</a></li>
        </ul>
    </div>

    <div class="content">
        <nav class="text-sm text-gray-600 mb-4" aria-label="breadcrumb">
            <ol class="flex space-x-2">
                <li class="flex items-center">
                    <a href="/admin" class="hover:underline text-blue-600">Admin</a>
                    <span class="mx-2 text-gray-400">/</span>
                </li>
                <li class="flex items-center">
                    <a href="/admin/orders" class="hover:underline text-blue-600">Orders</a>
                    <span class="mx-2 text-gray-400">/</span>
                </li>
                <li class="flex items-center text-gray-500">
                    <%= order.orderId || 'N/A' %>
                </li>
            </ol>
        </nav>

        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold">Order <%= order.orderId || 'N/A' %></h1>
                <div class="flex space-x-2">
                    <a href="/api/orders/<%= order.orderId || '' %>/invoice" 
                       class="px-4 py-2 bg-green-100 text-green-800 rounded-lg hover:bg-green-200 transition">
                        <i class="fas fa-file-download mr-2"></i> Invoice
                    </a>
                    <% if (order.status === 'Return Request' && order.returnRequested === true) { %>
                        <button onclick="handleReturnVerification(`<%= order.orderId || '' %>`, 'Approved')" 
                                class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition">
                            <i class="fas fa-check-circle mr-2"></i> Approve Return
                        </button>
                        <button onclick="handleReturnVerification(`<%= order.orderId || '' %>`, 'Denied')" 
                                class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                            <i class="fas fa-times-circle mr-2"></i> Deny Return
                        </button>
                    <% } %>
                </div>
            </div>

            <% if (order.status === 'Return Request' && order.returnRequested !== true) { %>
                <div class="warning-message">
                    <p><strong>Warning:</strong> Order status is 'Return Request', but no return request is found (returnRequested is false). Please check the database for inconsistencies.</p>
                </div>
            <% } %>

    <!-- Order Information and Payment Information in a Grid -->
<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    <!-- Order Information -->
    <div>
        <h2 class="text-lg font-semibold mb-2">Order Information</h2>
        <p class="mb-2"><strong>Date:</strong> <%= order.createdOn ? new Date(order.createdOn).toLocaleString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        }) : 'N/A' %></p>
        <p class="mb-2"><strong>Status:</strong> 
            <select id="orderStatusSelect" data-current-status="<%= order.status %>" class="form-select">
                <option value="Placed" <%= order.status === 'Placed' ? 'selected' : '' %>>Placed</option>
                <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
                <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                <option value="Return Request" <%= order.status === 'Return Request' ? 'selected' : '' %>>Return Request</option>
                <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                <option value="Return Denied" <%= order.status === 'Return Denied' ? 'selected' : '' %>>Return Denied</option>
            </select>
        </p>
        <% if (order.cancelReason) { %>
            <p class="mb-2"><strong>Cancellation Reason:</strong> <%= order.cancelReason || 'N/A' %></p>
        <% } %>
        <% if (order.returnRequested) { %>
            <p class="mb-2"><strong>Return Reason:</strong> <%= order.returnReason || 'No reason provided' %></p>
            <p class="mb-2"><strong>Return Status:</strong> 
                <% if (order.returnStatus) { %>
                    <%= order.returnStatus %>
                <% } else if (order.status === 'Return Denied') { %>
                    Denied
                <% } else { %>
                    Pending
                <% } %>
            </p>
        <% } %>
        <p class="mb-2"><strong>User:</strong> <%= order.user && order.user.name ? order.user.name : 'N/A' %> (<%= order.user && order.user.email ? order.user.email : 'N/A' %>)</p>
    </div>

    <!-- Payment Information -->
    <div>
        <h2 class="text-lg font-semibold mb-2">Payment Information</h2>
        <p class="mb-2"><strong>Subtotal:</strong> ₹<%= order.totalPrice ? order.totalPrice.toFixed(2) : '0.00' %></p>
        <p class="mb-2"><strong>Delivery Charge:</strong> ₹<%= order.shipping ? order.shipping.toFixed(2) : '0.00' %></p>
        <p class="mb-2"><strong>Discount:</strong> ₹<%= order.discount ? order.discount.toFixed(2) : '0.00' %></p>
        <p class="mb-2"><strong>Total:</strong> ₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></p>
        <p class="mb-2"><strong>Payment Method:</strong> <%= order.paymentMethod || 'Not specified' %></p>
    </div>
</div>
<!-- Order Items -->
<div class="mb-8">
    <h2 class="text-lg font-semibold mb-4">Order Items</h2>
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white">
            <thead>
                <tr>
                    <th class="py-2 px-4 border-b text-left">Product</th>
                    <th class="py-2 px-4 border-b text-left">Price</th>
                    <th class="py-2 px-4 border-b text-left">Quantity</th>
                    <th class="py-2 px-4 border-b text-left">Total</th>
                    <th class="py-2 px-4 border-b text-left">Status</th>
                </tr>
            </thead>
            <tbody>
                <% 
                    // Calculate discount factor (discount / totalPrice) to apply proportionally
                    const discountFactor = order.discount && order.totalPrice > 0 ? order.discount / order.totalPrice : 0;

                    // Combine orderedItems and cancelledItems into a single list with status
                    const allItems = [];
                    // Add orderedItems (if any)
                    (order.orderedItems || []).forEach(item => {
                        allItems.push({
                            ...item,
                            isCancelled: false,
                            isReturned: order.status === 'Returned' && order.returnStatus === 'Approved',
                            isReturnDenied: order.status === 'Return Denied',
                            cancelReason: null
                        });
                    });
                    // Add cancelledItems (if any)
                    (order.cancelledItems || []).forEach(item => {
                        allItems.push({
                            ...item,
                            isCancelled: true,
                            isReturned: false, // Cancelled items are never marked as Returned
                            isReturnDenied: false, // Cancelled items are not affected by return denial
                            cancelReason: item.cancelReason
                        });
                    });

                    // Display all items in a single loop
                    allItems.forEach(item => { %>
                        <% 
                            const itemTotal = item.price * item.quantity;
                            const discountedItemTotal = discountFactor > 0 ? itemTotal * (1 - discountFactor) : itemTotal;
                            const rowClass = item.isCancelled || item.isReturned || item.isReturnDenied ? 'bg-gray-100' : '';
                        %>
                        <tr class="<%= rowClass %>">
                            <td class="py-2 px-4 border-b">
                                <div class="flex items-center">
                                    <% if (item.product && item.product.productImage && item.product.productImage.length > 0) { %>
                                        <img src="<%= item.product.productImage[0] %>" 
                                             alt="<%= item.product.productName || 'Product' %>" 
                                             class="w-16 h-16 object-cover mr-4">
                                    <% } else { %>
                                        <img src="/images/default-product.jpg" 
                                             alt="No image available" 
                                             class="w-16 h-16 object-cover mr-4">
                                    <% } %>
                                    <div>
                                        <h3 class="font-medium"><%= item.product && item.product.productName ? item.product.productName : 'Unknown Product' %></h3>
                                    </div>
                                </div>
                            </td>
                            <td class="py-2 px-4 border-b">₹<%= item.price ? item.price.toFixed(2) : '0.00' %></td>
                            <td class="py-2 px-4 border-b"><%= item.quantity || 0 %></td>
                            <td class="py-2 px-4 border-b">₹<%= discountedItemTotal ? discountedItemTotal.toFixed(2) : '0.00' %></td>
                            <td class="py-2 px-4 border-b">
                                <% if (item.isCancelled) { %>
                                    <span class="text-red-600">Cancelled</span>
                                    <% if (item.cancelReason) { %>
                                        <p class="text-sm text-gray-600">Reason: <%= item.cancelReason %></p>
                                    <% } %>
                                <% } else if (item.isReturned) { %>
                                    <span class="text-orange-600">Returned</span>
                                <% } else if (item.isReturnDenied) { %>
                                    <span class="text-red-600">Return Denied</span>
                                <% } else { %>
                                    <span class="text-green-600">Active</span>
                                <% } %>
                            </td>
                        </tr>
                    <% }) %>
            </tbody>
        </table>
    </div>
    <div class="mt-4 text-right">
        <p class="text-lg font-semibold">Grand Total: ₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></p>
    </div>
</div>
            <div class="mb-8">
                <h2 class="text-lg font-semibold mb-4">Shipping Address</h2>
                <div class="address-container">
                    <% if (order.address) { %>
                        <p class="mb-2"><strong>Type:</strong> <%= order.address.addressType || 'N/A' %></p>
                        <p class="mb-2"><strong>Name:</strong> <%= order.address.name || 'N/A' %></p>
                        <p class="mb-2"><strong>Landmark:</strong> <%= order.address.landMark || 'N/A' %></p>
                        <p class="mb-2"><strong>City, State, Pincode:</strong> <%= order.address.city || 'N/A' %>, <%= order.address.state || 'N/A' %> <%= order.address.pincode || 'N/A' %></p>
                        <p class="mb-2"><strong>Phone:</strong> <%= order.address.phone || 'N/A' %></p>
                        <p class="mb-2"><strong>Alternate Phone:</strong> <%= order.address.altPhone || 'N/A' %></p>
                    <% } else { %>
                        <p>No address information available. Please verify the order's address data.</p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

   <script>
    // Safely log order data
    try {
        console.log('Order data:', `<%- JSON.stringify(order, null, 2).replace(/</g, '\\u003c').replace(/>/g, '\\u003e') %>`);
    } catch (e) {
        console.error('Error logging order data:', e);
    }

    // Function to update status dropdown based on current status
    function updateStatusDropdown() {
        const statusSelect = document.getElementById('orderStatusSelect');
        if (!statusSelect) return; // Exit if the dropdown doesn't exist

        const currentStatus = statusSelect.dataset.currentStatus;
        // Disable the entire dropdown if status is Delivered
        statusSelect.disabled = currentStatus === 'Delivered';
    }

    // Run the function on page load
    document.addEventListener('DOMContentLoaded', updateStatusDropdown);

    // Handle status update
    document.getElementById('orderStatusSelect').addEventListener('change', async function() {
        const orderId = `<%= order.orderId || '' %>`;
        const status = this.value;

        try {
            const response = await fetch('/admin/orders/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ orderId, status })
            });

            const data = await response.json();
            if (response.ok) {
                // Update the data-current-status attribute
                this.dataset.currentStatus = status;
                // Update the dropdown based on new status
                updateStatusDropdown();
                await Swal.fire({
                    title: 'Success!',
                    text: data.message || 'Order status updated successfully.',
                    icon: 'success',
                    confirmButtonColor: '#3085d6'
                });
                window.location.reload();
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: data.error || 'Failed to update order status.',
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
                this.value = `<%= order.status || 'Pending' %>`; // Revert on error
            }
        } catch (error) {
            console.error('Error updating status:', error);
            await Swal.fire({
                title: 'Error!',
                text: 'An error occurred while updating the status.',
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
            this.value = `<%= order.status || 'Pending' %>`; // Revert on error
        }
    });

    // Handle return verification
    async function handleReturnVerification(orderId, status) {
        const action = status === 'Approved' ? 'approve' : 'deny';
        const result = await Swal.fire({
            title: `Are you sure?`,
            text: `Do you really want to ${action} the return request for this order?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: status === 'Approved' ? '#16a34a' : '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: `Yes, ${action} it!`,
            cancelButtonText: 'No, cancel'
        });

        if (!result.isConfirmed) return;

        try {
            const response = await fetch('/admin/orders/verify-return', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ orderId, status })
            });

            const data = await response.json();
            if (response.ok) {
                await Swal.fire({
                    title: 'Success!',
                    text: data.message || `Return request ${action}d successfully.`,
                    icon: 'success',
                    confirmButtonColor: '#3085d6'
                });
                window.location.reload();
            } else {
                await Swal.fire({
                    title: 'Error!',
                    text: data.error || `Failed to ${action} return request.`,
                    icon: 'error',
                    confirmButtonColor: '#3085d6'
                });
            }
        } catch (error) {
            console.error(`Error ${action}ing return request:`, error);
            await Swal.fire({
                title: 'Error!',
                text: `An error occurred while ${action}ing the return request.`,
                icon: 'error',
                confirmButtonColor: '#3085d6'
            });
        }
    }
</script>
</body>
</html>

