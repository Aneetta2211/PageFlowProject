<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.6.1/dist/cropper.min.css">
  <!-- SweetAlert2 CDN -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      margin: 0;
      background-color: #f4f7fa;
    }
    .main-wrapper {
      display: flex;
      flex-grow: 1;
    }
    .sidebar {
      width: 250px;
      background-color: #343a40;
      color: white;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
    }
    .sidebar h2 {
      margin: 0;
      padding: 20px 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .sidebar ul li {
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .sidebar ul li a {
      padding: 15px 20px;
      display: block;
      color: rgba(255, 255, 255, 0.8);
      text-decoration: none;
      transition: all 0.3s;
    }
    .sidebar ul li a:hover,
    .sidebar ul li a.active {
      background-color: rgba(255, 255, 255, 0.1);
      color: #fff;
    }
    .sidebar ul li a i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
    }
    .content-area {
      flex-grow: 1;
      margin-left: 250px;
      padding: 30px;
    }
    .form-card {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
      padding: 25px;
      max-width: 800px;
      margin: 0 auto;
    }
    .form-label {
      color: #34495e;
      font-weight: 500;
    }
    .form-control,
    .form-select {
      border: 1px solid #dfe6e9;
      border-radius: 8px;
      padding: 10px;
      transition: border-color 0.3s;
    }
    .form-control:focus,
    .form-select:focus {
      border-color: #3498db;
      box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
    }
    .form-group textarea {
      min-height: 100px;
      resize: vertical;
    }
    .error-message {
      color: #e74c3c;
      font-size: 0.85rem;
      margin-top: 5px;
    }
    .image-upload-area {
      border: 2px dashed #b2bec3;
      border-radius: 10px;
      padding: 20px;
      text-align: center;
      background: #f9fbfc;
    }
    .image-upload-area.dragover {
      background: #e6f0fa;
      border-color: #3498db;
    }
    .thumbnails-container {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 15px;
      justify-content: center;
    }
    .thumbnail-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 8px;
      width: 120px;
    }
    .thumbnail {
      width: 100px;
      height: 150px;
      object-fit: cover;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      cursor: pointer;
    }
    .remove-btn {
      background: #ff0000;
      color: white;
      border: none;
      border-radius: 5px;
      width: 100%;
      padding: 5px;
      font-size: 14px;
      font-weight: 500;
      cursor: pointer;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      transition: background 0.2s, transform 0.2s;
    }
    .remove-btn:hover {
      background: #cc0000;
      transform: scale(1.05);
    }
    .btn-custom {
      background: #3498db;
      border: none;
      border-radius: 8px;
      padding: 10px 20px;
      font-weight: 500;
      color: white;
      transition: background 0.3s;
    }
    .btn-custom:hover {
      background: #2980b9;
    }
    .btn-secondary-custom {
      background: #7f8c8d;
      color: white;
    }
    .btn-secondary-custom:hover {
      background: #6c757d;
    }
    .button-group {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
    }
    .image-count {
      color: #34495e;
      font-size: 0.9rem;
      margin-top: 10px;
    }
    .no-images {
      color: #7f8c8d;
      font-style: italic;
      width: 100%;
      text-align: center;
    }
    .modal-content {
      border-radius: 10px;
    }
    .cropper-container {
      max-height: 400px;
      width: 100%;
      margin: 0 auto;
    }
    #cropperImage {
      max-width: 100%;
      display: block;
    }
    .offer-success {
      color: green;
      font-weight: bold;
    }
    .offer-error {
      color: red;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="main-wrapper">
    <div class="sidebar">
      <h2 class="text-center p-3">Admin</h2>
      <ul>
        <li><a href="/admin"><i class="fa fa-tachometer-alt"></i> Dashboard</a></li>
        <li><a href="/admin/customers"><i class="fa fa-users"></i> Customers</a></li>
        <li><a href="/admin/category"><i class="fa fa-th-large"></i> Category</a></li>
        <li><a href="/admin/add-product"><i class="fa fa-plus"></i> Add Products</a></li>
        <li><a href="/admin/products" class="active"><i class="fa fa-box"></i> Products</a></li>
        <li><a href="/admin/orders"><i class="fa fa-shopping-cart"></i> Orders</a></li>
        <li><a href="/admin/coupons"><i class="fa fa-tag"></i> Coupons</a></li>
        <li><a href="/admin/wallet"><i class="fa fa-wallet"></i> Wallet</a></li>
        <li><a href="/admin/logout"><i class="fa fa-sign-out-alt"></i> Logout</a></li>
      </ul>
    </div>

    <div class="content-area">
      <div class="container">
        <div class="form-card">
          <h2 class="text-center mb-4">Edit Product</h2>
          <form action="/admin/edit-product/<%= product._id %>" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="row g-4">
              <div class="col-md-6">
                <label for="productName" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="productName" name="productName" value="<%= product.productName %>" required>
                <div id="productName-error" class="error-message"></div>
              </div>
              <div class="col-md-6">
                <label for="category" class="form-label">Category</label>
                <select class="form-select" id="category" name="category" required>
                  <% category.forEach(cat => { %>
                    <option value="<%= cat._id %>" <%= product.category._id.toString() === cat._id.toString() ? 'selected' : '' %>>
                      <%= cat.name %>
                    </option>
                  <% }) %>
                </select>
                <div id="category-error" class="error-message"></div>
              </div>
              <div class="col-12">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" required><%= product.description %></textarea>
                <div id="description-error" class="error-message"></div>
              </div>
              <div class="col-md-4">
                <label for="regularPrice" class="form-label">Regular Price</label>
                <input type="number" class="form-control" id="regularPrice" name="regularPrice" value="<%= product.regularPrice %>" step="0.01" min="0" required>
                <div id="regularPrice-error" class="error-message"></div>
              </div>
              <div class="col-md-4">
                <label for="salesPrice" class="form-label">Sales Price (After Offers)</label>
                <input type="number" class="form-control" id="salesPrice" name="salesPrice" value="<%= product.salesPrice %>" step="0.01" min="0" readonly>
                <div id="salesPrice-error" class="error-message"></div>
              </div>
              <div class="col-md-4">
                <label for="quantity" class="form-label">Quantity</label>
                <input type="number" class="form-control" id="quantity" name="quantity" value="<%= product.quantity %>" min="0" required>
                <div id="quantity-error" class="error-message"></div>
              </div>
              <div class="col-md-4">
                <label for="isBlocked" class="form-label">Status</label>
                <select class="form-control" id="isBlocked" name="isBlocked">
                  <option value="false" <%= !product.isBlocked ? 'selected' : '' %>>Active</option>
                  <option value="true" <%= product.isBlocked ? 'selected' : '' %>>Deleted</option>
                </select>
                <div id="isBlocked-error" class="error-message"></div>
              </div>
              <div class="col-12">
                <div class="mb-3">
                    <label class="form-label">Product Offer</label>
                    <p>Current Product Offer: <%= product.productOffer %>%</p>
                    <p><strong>Effective Offer: <%= product.totalOffer %>% (<%= product.offerType %>)</strong></p>
                    <p><strong>Final Price After Offer: â‚¹<%= product.discountedPrice %></strong></p>
                </div>
              </div>
              <div class="col-12">
                <div class="mb-3">
                    <label class="form-label">Set Product Offer</label>
                    <div class="input-group">
                        <input type="number" class="form-control" id="productOfferInput" name="productOffer" min="0" max="100" value="<%= product.productOffer %>" step="1">
                        <span class="input-group-text">%</span>
                        <button type="button" class="btn btn-success" id="applyOfferBtn">Apply Offer</button>
                        <button type="button" class="btn btn-danger" id="removeOfferBtn">Remove Offer</button>
                    </div>
                    <small class="text-muted">Enter a percentage between 0-100</small>
                    <div id="offerMessage" class="mt-2"></div>
                </div>
              </div>
              <div class="col-12">
                <div class="image-upload-area" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)" ondrop="handleDrop(event)">
                  <label class="form-label d-block">Product Images (Drag or Click to Upload, Exactly 3 Required)</label>
                  <input type="file" class="form-control d-none" id="images" name="images" accept="image/png, image/jpeg, image/jpg" multiple onchange="startCropper(event)">
                  <button type="button" class="btn btn-outline-primary mb-3" onclick="document.getElementById('images').click()">Select Images</button>
                  <div id="thumbnails-container" class="thumbnails-container">
                    <% if (!product.productImage || product.productImage.length === 0) { %>
                      <div class="no-images">No images loaded. Upload three images above.</div>
                    <% } else { %>
                      <% product.productImage.forEach((img, index) => { %>
                        <div class="thumbnail-container">
                          <img src="<%= img %>" class="thumbnail" data-existing="true" data-path="<%= img %>" title="Product image">
                          <button type="button" class="remove-btn" onclick="removeImage(this, '<%= img %>')" title="Remove this image">Remove</button>
                          <input type="hidden" name="existingImages" value="<%= img %>">
                        </div>
                      <% }) %>
                    <% } %>
                  </div>
                  <div id="images-error" class="error-message"></div>
                  <div class="image-count" id="image-count">Images: <%= product.productImage ? product.productImage.length : 0 %>/3</div>
                </div>
              </div>
              <div class="col-12 text-center">
                <div class="button-group">
                  <button type="submit" class="btn btn-custom">Update Product</button>
                  <a href="/admin/products" class="btn btn-secondary-custom">Cancel</a>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="cropper-container">
            <img id="cropperImage" src="" alt="Image to crop">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="saveCrop">Save Crop</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.6.1/dist/cropper.min.js"></script>
  <!-- SweetAlert2 Script -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Check for error message passed from controller
      const errorMessage = '<%= errorMessage ? errorMessage : '' %>';
      if (errorMessage) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: errorMessage,
          confirmButtonText: 'OK'
        });
      }

      if (typeof Cropper === 'undefined') {
        console.error("Cropper.js is not loaded.");
        return;
      }
      console.log("Cropper.js loaded successfully:", Cropper);

      const thumbnailCount = document.querySelectorAll('.thumbnail-container').length;
      console.log("Thumbnails loaded:", thumbnailCount);
    });

    let cropper;
    let croppedImages = [];
    let originalFiles = [];
    let existingImages = <%- JSON.stringify((product && product.productImage) || []) %>;
    const maxImages = 3;

    console.log("Initial existingImages:", existingImages);

    function validateForm() {
      let isValid = true;
      const fields = [
        { id: 'productName', errorId: 'productName-error', message: 'Product name is required' },
        { id: 'category', errorId: 'category-error', message: 'Category is required' },
        { id: 'description', errorId: 'description-error', message: 'Description is required' },
        { id: 'regularPrice', errorId: 'regularPrice-error', message: 'Regular price must be a positive number' },
        { id: 'quantity', errorId: 'quantity-error', message: 'Quantity must be a non-negative integer' }
      ];

      fields.forEach(field => {
        const value = document.getElementById(field.id).value.trim();
        const errorElement = document.getElementById(field.errorId);
        if (!value) {
          errorElement.textContent = field.message;
          isValid = false;
        } else if ((field.id === 'regularPrice' || field.id === 'salesPrice') && (isNaN(value) || value < 0)) {
          errorElement.textContent = field.message;
          isValid = false;
        } else if (field.id === 'quantity' && (!Number.isInteger(+value) || value < 0)) {
          errorElement.textContent = field.message;
          isValid = false;
        } else {
          errorElement.textContent = '';
        }
      });

      const totalImages = existingImages.length + croppedImages.length;
      if (totalImages < 3) {
        document.getElementById('images-error').textContent = 'At least three images are required';
        isValid = false;
      } else if (totalImages > maxImages) {
        document.getElementById('images-error').textContent = 'Exactly three images are required';
        isValid = false;
      } else {
        document.getElementById('images-error').textContent = '';
        const dataTransfer = new DataTransfer();
        croppedImages.forEach(file => dataTransfer.items.add(file));
        document.getElementById('images').files = dataTransfer.files;
      }

      return isValid;
    }

    function startCropper(event) {
      const files = event.target.files || event.dataTransfer.files;
      if (!files || files.length === 0) {
        console.error("No files selected for cropping");
        return;
      }

      const remainingSlots = maxImages - (existingImages.length + croppedImages.length);
      if (remainingSlots <= 0) {
        console.log("Max images reached:", maxImages);
        return;
      }

      originalFiles = Array.from(files).slice(0, remainingSlots);
      console.log("Upload triggered for", originalFiles.length, "files");
      showCropper(0);
      document.getElementById('images').value = '';
    }

    function showCropper(index) {
      if (index >= originalFiles.length) {
        console.log("Finished cropping all files");
        originalFiles = [];
        updateThumbnails();
        return;
      }

      const file = originalFiles[index];
      const remainingSlots = maxImages - (existingImages.length + croppedImages.length);
      console.log("Cropping file:", file.name, "Index:", index, "Remaining slots:", remainingSlots);
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.getElementById('cropperImage');
        img.src = e.target.result;

        const modalElement = document.getElementById('cropperModal');
        const modal = new bootstrap.Modal(modalElement, { backdrop: 'static' });
        modal.show();

        modalElement.addEventListener('shown.bs.modal', function initializeCropper() {
          console.log("Modal shown for file:", file.name);
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }

          try {
            cropper = new Cropper(img, {
              aspectRatio: 2 / 3,
              viewMode: 2,
              autoCrop: true,
              autoCropArea: 0.8,
              background: true,
              center: true,
              highlight: true,
              guides: true,
              dragMode: 'crop',
              cropBoxMovable: true,
              cropBoxResizable: true,
              toggleDragModeOnDblclick: false,
              responsive: true,
              restore: true,
              zoomable: true,
              zoomOnTouch: true,
              zoomOnWheel: true,
              wheelZoomRatio: 0.1,
              movable: true,
              rotatable: false,
              scalable: true,
              minCropBoxWidth: 100,
              minCropBoxHeight: 150,
              ready: function() {
                cropper.setCropBoxData({ width: 200, height: 300 });
                console.log("Cropper ready for file:", file.name);
              }
            });
          } catch (error) {
            console.error("Failed to initialize Cropper.js:", error);
          }

          modalElement.removeEventListener('shown.bs.modal', initializeCropper);
        }, { once: true });

        const saveCropBtn = document.getElementById('saveCrop');
        saveCropBtn.onclick = function() {
          if (!cropper) {
            console.error("Cropper not initialized when trying to save");
            return;
          }
          const canvas = cropper.getCroppedCanvas({ width: 200, height: 300 });
          if (!canvas) {
            console.error("Failed to get cropped canvas");
            return;
          }
          canvas.toBlob(blob => {
            if (!blob) {
              console.error("Failed to convert canvas to blob");
              return;
            }
            const croppedFile = new File([blob], file.name, { type: file.type });
            croppedImages.push(croppedFile);
            console.log("Cropped image saved:", croppedFile.name);
            cropper.destroy();
            cropper = null;
            modal.hide();
            setTimeout(() => showCropper(index + 1), 300);
          }, file.type, 0.9);
        };

        modalElement.addEventListener('hidden.bs.modal', function cleanup() {
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
          console.log("Modal hidden for file:", file.name);
          modalElement.removeEventListener('hidden.bs.modal', cleanup);
        }, { once: true });
      };
      reader.readAsDataURL(file);
    }

    function updateThumbnails() {
      const container = document.getElementById('thumbnails-container');
      const form = document.querySelector('form');
      
      document.querySelectorAll('input[name="existingImages"], input[name="removedImages"]').forEach(input => input.remove());
      
      container.innerHTML = '';

      if (existingImages.length === 0 && croppedImages.length === 0) {
        container.innerHTML = '<div class="no-images">No images loaded. Upload three images above.</div>';
      } else {
        existingImages.forEach((img, index) => {
          const div = document.createElement('div');
          div.classList.add('thumbnail-container');
          div.innerHTML = `
            <img src="${img}" class="thumbnail" data-existing="true" data-path="${img}" title="Product image">
            <button type="button" class="remove-btn" onclick="removeImage(this, '${img}')" title="Remove this image">Remove</button>
          `;
          container.appendChild(div);

          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'existingImages';
          input.value = img;
          form.appendChild(input);
        });

        croppedImages.forEach((file, index) => {
          const reader = new FileReader();
          reader.onload = function(e) {
            const div = document.createElement('div');
            div.classList.add('thumbnail-container');
            div.innerHTML = `
              <img src="${e.target.result}" class="thumbnail" onclick="editCrop(${index})" title="Click to edit crop">
              <button type="button" class="remove-btn" onclick="removeCroppedImage(${index})" title="Remove this image">Remove</button>
            `;
            container.appendChild(div);
          };
          reader.readAsDataURL(file);
        });
      }

      const totalImages = existingImages.length + croppedImages.length;
      document.getElementById('image-count').textContent = `Images: ${totalImages}/${maxImages}`;
      console.log("Thumbnails updated. Existing:", existingImages.length, "Cropped:", croppedImages.length);
    }

    function removeImage(button, imagePath) {
      console.log("Attempting to remove existing image:", imagePath);
      
      existingImages = existingImages.filter(img => img !== imagePath);
      
      const form = document.querySelector('form');
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'removedImages';
      input.value = imagePath;
      form.appendChild(input);
      
      updateThumbnails();
      
      console.log("Image removed. Updated existingImages:", existingImages);
    }

    function editCrop(index) {
      const file = croppedImages[index];
      const reader = new FileReader();
      reader.onload = function(e) {
        const img = document.getElementById('cropperImage');
        img.src = e.target.result;

        const modalElement = document.getElementById('cropperModal');
        const modal = new bootstrap.Modal(modalElement, { backdrop: 'static' });
        modal.show();

        modalElement.addEventListener('shown.bs.modal', function initializeCropper() {
          if (cropper) {
            cropper.destroy();
          }
          cropper = new Cropper(img, {
            aspectRatio: 2 / 3,
            viewMode: 2,
            autoCrop: true,
            autoCropArea: 0.8,
            background: true,
            center: true,
            highlight: true,
            guides: true,
            dragMode: 'crop',
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
            responsive: true,
            restore: true,
            zoomable: true,
            zoomOnTouch: true,
            zoomOnWheel: true,
            wheelZoomRatio: 0.1,
            movable: true,
            rotatable: false,
            scalable: true,
            minCropBoxWidth: 100,
            minCropBoxHeight: 150,
            ready: function() {
              cropper.setCropBoxData({ width: 200, height: 300 });
              console.log("Cropper ready for editing index:", index);
            }
          });
          modalElement.removeEventListener('shown.bs.modal', initializeCropper);
        }, { once: true });

        const saveCropBtn = document.getElementById('saveCrop');
        saveCropBtn.onclick = function() {
          if (!cropper) {
            console.error("Cropper not initialized for edit");
            return;
          }
          const canvas = cropper.getCroppedCanvas({ width: 200, height: 300 });
          canvas.toBlob(blob => {
            croppedImages[index] = new File([blob], file.name, { type: file.type });
            console.log("Cropped image edited:", file.name);
            cropper.destroy();
            cropper = null;
            modal.hide();
            updateThumbnails();
          }, file.type, 0.9);
        };

        modalElement.addEventListener('hidden.bs.modal', function cleanup() {
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
          modalElement.removeEventListener('hidden.bs.modal', cleanup);
        }, { once: true });
      };
      reader.readAsDataURL(file);
    }

    function removeCroppedImage(index) {
      console.log("Removing cropped image at index:", index);
      croppedImages.splice(index, 1);
      updateThumbnails();
    }

    function handleDragOver(event) {
      event.preventDefault();
      event.target.closest('.image-upload-area').classList.add('dragover');
    }

    function handleDragLeave(event) {
      event.preventDefault();
      event.target.closest('.image-upload-area').classList.remove('dragover');
    }

    function handleDrop(event) {
      event.preventDefault();
      startCropper(event);
      event.target.closest('.image-upload-area').classList.remove('dragover');
    }

    // Product offer functionality
    document.getElementById('applyOfferBtn').addEventListener('click', async function() {
      console.log('Apply Offer button clicked');
      const button = this;
      const offerInput = document.getElementById('productOfferInput');
      const offerMessage = document.getElementById('offerMessage');
      const productId = '<%= product._id %>';
      const offerPercentage = parseInt(offerInput.value);

      console.log('Product ID:', productId, 'Offer Percentage:', offerPercentage);

      button.disabled = true;
      offerMessage.textContent = '';
      offerMessage.className = '';

      if (!productId || productId === 'undefined') {
        console.error('Invalid product ID:', productId);
        offerMessage.textContent = 'Invalid product ID';
        offerMessage.className = 'offer-error';
        button.disabled = false;
        return;
      }

      if (isNaN(offerPercentage) || offerPercentage < 0 || offerPercentage > 100) {
        console.error('Invalid offer percentage:', offerPercentage);
        offerMessage.textContent = 'Please enter a valid percentage between 0 and 100';
        offerMessage.className = 'offer-error';
        button.disabled = false;
        return;
      }

      try {
        const response = await fetch('/admin/products/add-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            productId: productId,
            offerPercentage: offerPercentage
          })
        });

        console.log('Response status:', response.status);

        const contentType = response.headers.get('content-type');
        if (!response.ok) {
          console.error('Request failed with status:', response.status);
          if (contentType && contentType.includes('text/html')) {
            console.error('Received HTML response, likely a login page. Session may have expired.');
            offerMessage.textContent = 'Session expired. Redirecting to login...';
            offerMessage.className = 'offer-error';
            setTimeout(() => {
              window.location.href = '/admin/login';
            }, 2000);
            button.disabled = false;
            return;
          }
          const errorData = await response.json();
          console.error('Error response:', errorData);
          throw new Error(errorData.message || 'Failed to apply offer');
        }

        if (!contentType || !contentType.includes('application/json')) {
          console.error('Unexpected response format:', contentType);
          throw new Error('Unexpected response format');
        }

        const result = await response.json();
        console.log('Offer application response:', result);

        if (result.success) {
          const productOfferElement = document.querySelector('p:nth-of-type(1)');
          const effectiveOfferElement = document.querySelector('p:nth-of-type(2) strong');
          const finalPriceElement = document.querySelector('p:nth-of-type(3) strong');

          if (productOfferElement && effectiveOfferElement && finalPriceElement) {
            productOfferElement.textContent = `Current Product Offer: ${result.productOffer}%`;
            effectiveOfferElement.textContent = `Effective Offer: ${result.totalOffer}% (${result.offerType})`;
            finalPriceElement.textContent = `Final Price After Offer: â‚¹${result.salesPrice}`;
            document.getElementById('salesPrice').value = result.salesPrice;
            document.getElementById('productOfferInput').value = result.productOffer;
            
            offerMessage.textContent = result.message;
            offerMessage.className = 'offer-success';
            console.log('UI updated successfully');
          } else {
            console.error('DOM elements for offer update not found');
            offerMessage.textContent = 'Offer applied, but UI update failed';
            offerMessage.className = 'offer-error';
          }
        } else {
          console.error('Offer application failed:', result.message);
          throw new Error(result.message || 'Failed to apply offer');
        }
      } catch (error) {
        console.error('Error applying offer:', error);
        offerMessage.textContent = error.message || 'An error occurred while applying the offer';
        offerMessage.className = 'offer-error';
      } finally {
        button.disabled = false;
      }
    });

    document.getElementById('removeOfferBtn').addEventListener('click', async function() {
      console.log('Remove Offer button clicked');
      const button = this;
      const offerMessage = document.getElementById('offerMessage');
      const productId = '<%= product._id %>';

      console.log('Product ID:', productId);

      button.disabled = true;
      offerMessage.textContent = '';
      offerMessage.className = '';

      if (!productId || productId === 'undefined') {
        console.error('Invalid product ID:', productId);
        offerMessage.textContent = 'Invalid product ID';
        offerMessage.className = 'offer-error';
        button.disabled = false;
        return;
      }

      try {
        const response = await fetch('/admin/products/remove-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            productId: productId
          })
        });

        console.log('Response status:', response.status);

        const contentType = response.headers.get('content-type');
        if (!response.ok) {
          console.error('Request failed with status:', response.status);
          if (contentType && contentType.includes('text/html')) {
            console.error('Received HTML response, likely a login page. Session may have expired.');
            offerMessage.textContent = 'Session expired. Redirecting to login...';
            offerMessage.className = 'offer-error';
            setTimeout(() => {
              window.location.href = '/admin/login';
            }, 2000);
            button.disabled = false;
            return;
          }
          const errorData = await response.json();
          console.error('Error response:', errorData);
          throw new Error(errorData.message || 'Failed to remove offer');
        }

        if (!contentType || !contentType.includes('application/json')) {
          console.error('Unexpected response format:', contentType);
          throw new Error('Unexpected response format');
        }

        const result = await response.json();
        console.log('Offer removal response:', result);

        if (result.success) {
          const productOfferElement = document.querySelector('p:nth-of-type(1)');
          const effectiveOfferElement = document.querySelector('p:nth-of-type(2) strong');
          const finalPriceElement = document.querySelector('p:nth-of-type(3) strong');

          if (productOfferElement && effectiveOfferElement && finalPriceElement) {
            document.getElementById('productOfferInput').value = '0';
            productOfferElement.textContent = 'Current Product Offer: 0%';
            effectiveOfferElement.textContent = `Effective Offer: ${result.totalOffer}% (${result.offerType})`;
            finalPriceElement.textContent = `Final Price After Offer: â‚¹${result.salesPrice}`;
            document.getElementById('salesPrice').value = result.salesPrice;
            
            offerMessage.textContent = result.message;
            offerMessage.className = 'offer-success';
            console.log('UI updated successfully');
          } else {
            console.error('DOM elements for offer update not found');
            offerMessage.textContent = 'Offer removed, but UI update failed';
            offerMessage.className = 'offer-error';
          }
        } else {
          console.error('Offer removal failed:', result.message);
          throw new Error(result.message || 'Failed to remove offer');
        }
      } catch (error) {
        console.error('Error removing offer:', error);
        offerMessage.textContent = error.message || 'An error occurred while removing the offer';
        offerMessage.className = 'offer-error';
      } finally {
        button.disabled = false;
      }
    });

    updateThumbnails();
  </script>
</body>
</html>